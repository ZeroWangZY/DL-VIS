node {
  name: "global_step/global_step/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "global_step/global_step"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/global_step/Assign"
  op: "Assign"
  input: "global_step/global_step"
  input: "global_step/global_step/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step/global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/global_step/read"
  op: "Identity"
  input: "global_step/global_step"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step/global_step"
      }
    }
  }
}
node {
  name: "cur_epoch/cur_epoch/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "cur_epoch/cur_epoch"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "cur_epoch/cur_epoch/Assign"
  op: "Assign"
  input: "cur_epoch/cur_epoch"
  input: "cur_epoch/cur_epoch/initial_value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cur_epoch/cur_epoch"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "cur_epoch/cur_epoch/read"
  op: "Identity"
  input: "cur_epoch/cur_epoch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cur_epoch/cur_epoch"
      }
    }
  }
}
node {
  name: "cur_epoch/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "cur_epoch/add"
  op: "Add"
  input: "cur_epoch/cur_epoch/read"
  input: "cur_epoch/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "cur_epoch/Assign"
  op: "Assign"
  input: "cur_epoch/cur_epoch"
  input: "cur_epoch/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@cur_epoch/cur_epoch"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "x"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "y"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_INT16
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
        dim {
          size: 10
        }
      }
    }
  }
}
node {
  name: "conv1_1/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1_1/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.09975093603134155
      }
    }
  }
}
node {
  name: "conv1_1/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.09975093603134155
      }
    }
  }
}
node {
  name: "conv1_1/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1_1/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv1_1/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv1_1/weights/Initializer/random_uniform/max"
  input: "conv1_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/weights"
      }
    }
  }
}
node {
  name: "conv1_1/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv1_1/weights/Initializer/random_uniform/RandomUniform"
  input: "conv1_1/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/weights"
      }
    }
  }
}
node {
  name: "conv1_1/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv1_1/weights/Initializer/random_uniform/mul"
  input: "conv1_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/weights"
      }
    }
  }
}
node {
  name: "conv1_1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1_1/weights/Assign"
  op: "Assign"
  input: "conv1_1/weights"
  input: "conv1_1/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1_1/weights/read"
  op: "Identity"
  input: "conv1_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/weights"
      }
    }
  }
}
node {
  name: "conv1_1/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1_1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1_1/biases/Assign"
  op: "Assign"
  input: "conv1_1/biases"
  input: "conv1_1/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1_1/biases/read"
  op: "Identity"
  input: "conv1_1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/biases"
      }
    }
  }
}
node {
  name: "conv1_1/conv"
  op: "Conv2D"
  input: "x"
  input: "conv1_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1_1/bias_add"
  op: "BiasAdd"
  input: "conv1_1/conv"
  input: "conv1_1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv1_1/relu"
  op: "Relu"
  input: "conv1_1/bias_add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv1_2/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "conv1_2/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07216878235340118
      }
    }
  }
}
node {
  name: "conv1_2/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07216878235340118
      }
    }
  }
}
node {
  name: "conv1_2/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv1_2/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv1_2/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv1_2/weights/Initializer/random_uniform/max"
  input: "conv1_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/weights"
      }
    }
  }
}
node {
  name: "conv1_2/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv1_2/weights/Initializer/random_uniform/RandomUniform"
  input: "conv1_2/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/weights"
      }
    }
  }
}
node {
  name: "conv1_2/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv1_2/weights/Initializer/random_uniform/mul"
  input: "conv1_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/weights"
      }
    }
  }
}
node {
  name: "conv1_2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1_2/weights/Assign"
  op: "Assign"
  input: "conv1_2/weights"
  input: "conv1_2/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1_2/weights/read"
  op: "Identity"
  input: "conv1_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/weights"
      }
    }
  }
}
node {
  name: "conv1_2/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv1_2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv1_2/biases/Assign"
  op: "Assign"
  input: "conv1_2/biases"
  input: "conv1_2/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv1_2/biases/read"
  op: "Identity"
  input: "conv1_2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/biases"
      }
    }
  }
}
node {
  name: "conv1_2/conv"
  op: "Conv2D"
  input: "conv1_1/relu"
  input: "conv1_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv1_2/bias_add"
  op: "BiasAdd"
  input: "conv1_2/conv"
  input: "conv1_2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv1_2/relu"
  op: "Relu"
  input: "conv1_2/bias_add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "pool1/pool1"
  op: "MaxPool"
  input: "conv1_2/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "conv2_1/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2_1/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0589255653321743
      }
    }
  }
}
node {
  name: "conv2_1/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0589255653321743
      }
    }
  }
}
node {
  name: "conv2_1/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2_1/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2_1/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2_1/weights/Initializer/random_uniform/max"
  input: "conv2_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/weights"
      }
    }
  }
}
node {
  name: "conv2_1/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2_1/weights/Initializer/random_uniform/RandomUniform"
  input: "conv2_1/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/weights"
      }
    }
  }
}
node {
  name: "conv2_1/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv2_1/weights/Initializer/random_uniform/mul"
  input: "conv2_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/weights"
      }
    }
  }
}
node {
  name: "conv2_1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2_1/weights/Assign"
  op: "Assign"
  input: "conv2_1/weights"
  input: "conv2_1/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2_1/weights/read"
  op: "Identity"
  input: "conv2_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/weights"
      }
    }
  }
}
node {
  name: "conv2_1/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2_1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2_1/biases/Assign"
  op: "Assign"
  input: "conv2_1/biases"
  input: "conv2_1/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2_1/biases/read"
  op: "Identity"
  input: "conv2_1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/biases"
      }
    }
  }
}
node {
  name: "conv2_1/conv"
  op: "Conv2D"
  input: "pool1/pool1"
  input: "conv2_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2_1/bias_add"
  op: "BiasAdd"
  input: "conv2_1/conv"
  input: "conv2_1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2_1/relu"
  op: "Relu"
  input: "conv2_1/bias_add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv2_2/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "conv2_2/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05103103816509247
      }
    }
  }
}
node {
  name: "conv2_2/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05103103816509247
      }
    }
  }
}
node {
  name: "conv2_2/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv2_2/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv2_2/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv2_2/weights/Initializer/random_uniform/max"
  input: "conv2_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/weights"
      }
    }
  }
}
node {
  name: "conv2_2/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv2_2/weights/Initializer/random_uniform/RandomUniform"
  input: "conv2_2/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/weights"
      }
    }
  }
}
node {
  name: "conv2_2/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv2_2/weights/Initializer/random_uniform/mul"
  input: "conv2_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/weights"
      }
    }
  }
}
node {
  name: "conv2_2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2_2/weights/Assign"
  op: "Assign"
  input: "conv2_2/weights"
  input: "conv2_2/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2_2/weights/read"
  op: "Identity"
  input: "conv2_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/weights"
      }
    }
  }
}
node {
  name: "conv2_2/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 128
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv2_2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv2_2/biases/Assign"
  op: "Assign"
  input: "conv2_2/biases"
  input: "conv2_2/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv2_2/biases/read"
  op: "Identity"
  input: "conv2_2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/biases"
      }
    }
  }
}
node {
  name: "conv2_2/conv"
  op: "Conv2D"
  input: "conv2_1/relu"
  input: "conv2_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv2_2/bias_add"
  op: "BiasAdd"
  input: "conv2_2/conv"
  input: "conv2_2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv2_2/relu"
  op: "Relu"
  input: "conv2_2/bias_add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "pool2/pool2"
  op: "MaxPool"
  input: "conv2_2/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "conv3_1/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv3_1/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0416666679084301
      }
    }
  }
}
node {
  name: "conv3_1/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0416666679084301
      }
    }
  }
}
node {
  name: "conv3_1/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv3_1/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv3_1/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv3_1/weights/Initializer/random_uniform/max"
  input: "conv3_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/weights"
      }
    }
  }
}
node {
  name: "conv3_1/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv3_1/weights/Initializer/random_uniform/RandomUniform"
  input: "conv3_1/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/weights"
      }
    }
  }
}
node {
  name: "conv3_1/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv3_1/weights/Initializer/random_uniform/mul"
  input: "conv3_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/weights"
      }
    }
  }
}
node {
  name: "conv3_1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv3_1/weights/Assign"
  op: "Assign"
  input: "conv3_1/weights"
  input: "conv3_1/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv3_1/weights/read"
  op: "Identity"
  input: "conv3_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/weights"
      }
    }
  }
}
node {
  name: "conv3_1/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv3_1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv3_1/biases/Assign"
  op: "Assign"
  input: "conv3_1/biases"
  input: "conv3_1/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv3_1/biases/read"
  op: "Identity"
  input: "conv3_1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/biases"
      }
    }
  }
}
node {
  name: "conv3_1/conv"
  op: "Conv2D"
  input: "pool2/pool2"
  input: "conv3_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv3_1/bias_add"
  op: "BiasAdd"
  input: "conv3_1/conv"
  input: "conv3_1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv3_1/relu"
  op: "Relu"
  input: "conv3_1/bias_add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv3_2/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv3_2/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.03608439117670059
      }
    }
  }
}
node {
  name: "conv3_2/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03608439117670059
      }
    }
  }
}
node {
  name: "conv3_2/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv3_2/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv3_2/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv3_2/weights/Initializer/random_uniform/max"
  input: "conv3_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/weights"
      }
    }
  }
}
node {
  name: "conv3_2/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv3_2/weights/Initializer/random_uniform/RandomUniform"
  input: "conv3_2/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/weights"
      }
    }
  }
}
node {
  name: "conv3_2/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv3_2/weights/Initializer/random_uniform/mul"
  input: "conv3_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/weights"
      }
    }
  }
}
node {
  name: "conv3_2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv3_2/weights/Assign"
  op: "Assign"
  input: "conv3_2/weights"
  input: "conv3_2/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv3_2/weights/read"
  op: "Identity"
  input: "conv3_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/weights"
      }
    }
  }
}
node {
  name: "conv3_2/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv3_2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv3_2/biases/Assign"
  op: "Assign"
  input: "conv3_2/biases"
  input: "conv3_2/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv3_2/biases/read"
  op: "Identity"
  input: "conv3_2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/biases"
      }
    }
  }
}
node {
  name: "conv3_2/conv"
  op: "Conv2D"
  input: "conv3_1/relu"
  input: "conv3_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv3_2/bias_add"
  op: "BiasAdd"
  input: "conv3_2/conv"
  input: "conv3_2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv3_2/relu"
  op: "Relu"
  input: "conv3_2/bias_add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv3_3/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "conv3_3/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.03608439117670059
      }
    }
  }
}
node {
  name: "conv3_3/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03608439117670059
      }
    }
  }
}
node {
  name: "conv3_3/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv3_3/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv3_3/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv3_3/weights/Initializer/random_uniform/max"
  input: "conv3_3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/weights"
      }
    }
  }
}
node {
  name: "conv3_3/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv3_3/weights/Initializer/random_uniform/RandomUniform"
  input: "conv3_3/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/weights"
      }
    }
  }
}
node {
  name: "conv3_3/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv3_3/weights/Initializer/random_uniform/mul"
  input: "conv3_3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/weights"
      }
    }
  }
}
node {
  name: "conv3_3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv3_3/weights/Assign"
  op: "Assign"
  input: "conv3_3/weights"
  input: "conv3_3/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv3_3/weights/read"
  op: "Identity"
  input: "conv3_3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/weights"
      }
    }
  }
}
node {
  name: "conv3_3/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv3_3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv3_3/biases/Assign"
  op: "Assign"
  input: "conv3_3/biases"
  input: "conv3_3/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv3_3/biases/read"
  op: "Identity"
  input: "conv3_3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/biases"
      }
    }
  }
}
node {
  name: "conv3_3/conv"
  op: "Conv2D"
  input: "conv3_2/relu"
  input: "conv3_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv3_3/bias_add"
  op: "BiasAdd"
  input: "conv3_3/conv"
  input: "conv3_3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv3_3/relu"
  op: "Relu"
  input: "conv3_3/bias_add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "pool3/pool3"
  op: "MaxPool"
  input: "conv3_3/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "conv4_1/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv4_1/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.02946278266608715
      }
    }
  }
}
node {
  name: "conv4_1/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.02946278266608715
      }
    }
  }
}
node {
  name: "conv4_1/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv4_1/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv4_1/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv4_1/weights/Initializer/random_uniform/max"
  input: "conv4_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/weights"
      }
    }
  }
}
node {
  name: "conv4_1/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv4_1/weights/Initializer/random_uniform/RandomUniform"
  input: "conv4_1/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/weights"
      }
    }
  }
}
node {
  name: "conv4_1/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv4_1/weights/Initializer/random_uniform/mul"
  input: "conv4_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/weights"
      }
    }
  }
}
node {
  name: "conv4_1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 256
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv4_1/weights/Assign"
  op: "Assign"
  input: "conv4_1/weights"
  input: "conv4_1/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv4_1/weights/read"
  op: "Identity"
  input: "conv4_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/weights"
      }
    }
  }
}
node {
  name: "conv4_1/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv4_1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv4_1/biases/Assign"
  op: "Assign"
  input: "conv4_1/biases"
  input: "conv4_1/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv4_1/biases/read"
  op: "Identity"
  input: "conv4_1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/biases"
      }
    }
  }
}
node {
  name: "conv4_1/conv"
  op: "Conv2D"
  input: "pool3/pool3"
  input: "conv4_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv4_1/bias_add"
  op: "BiasAdd"
  input: "conv4_1/conv"
  input: "conv4_1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv4_1/relu"
  op: "Relu"
  input: "conv4_1/bias_add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv4_2/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv4_2/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.025515519082546234
      }
    }
  }
}
node {
  name: "conv4_2/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.025515519082546234
      }
    }
  }
}
node {
  name: "conv4_2/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv4_2/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv4_2/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv4_2/weights/Initializer/random_uniform/max"
  input: "conv4_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/weights"
      }
    }
  }
}
node {
  name: "conv4_2/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv4_2/weights/Initializer/random_uniform/RandomUniform"
  input: "conv4_2/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/weights"
      }
    }
  }
}
node {
  name: "conv4_2/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv4_2/weights/Initializer/random_uniform/mul"
  input: "conv4_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/weights"
      }
    }
  }
}
node {
  name: "conv4_2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv4_2/weights/Assign"
  op: "Assign"
  input: "conv4_2/weights"
  input: "conv4_2/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv4_2/weights/read"
  op: "Identity"
  input: "conv4_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/weights"
      }
    }
  }
}
node {
  name: "conv4_2/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv4_2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv4_2/biases/Assign"
  op: "Assign"
  input: "conv4_2/biases"
  input: "conv4_2/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv4_2/biases/read"
  op: "Identity"
  input: "conv4_2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/biases"
      }
    }
  }
}
node {
  name: "conv4_2/conv"
  op: "Conv2D"
  input: "conv4_1/relu"
  input: "conv4_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv4_2/bias_add"
  op: "BiasAdd"
  input: "conv4_2/conv"
  input: "conv4_2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv4_2/relu"
  op: "Relu"
  input: "conv4_2/bias_add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv4_3/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv4_3/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.025515519082546234
      }
    }
  }
}
node {
  name: "conv4_3/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.025515519082546234
      }
    }
  }
}
node {
  name: "conv4_3/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv4_3/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv4_3/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv4_3/weights/Initializer/random_uniform/max"
  input: "conv4_3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/weights"
      }
    }
  }
}
node {
  name: "conv4_3/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv4_3/weights/Initializer/random_uniform/RandomUniform"
  input: "conv4_3/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/weights"
      }
    }
  }
}
node {
  name: "conv4_3/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv4_3/weights/Initializer/random_uniform/mul"
  input: "conv4_3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/weights"
      }
    }
  }
}
node {
  name: "conv4_3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv4_3/weights/Assign"
  op: "Assign"
  input: "conv4_3/weights"
  input: "conv4_3/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv4_3/weights/read"
  op: "Identity"
  input: "conv4_3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/weights"
      }
    }
  }
}
node {
  name: "conv4_3/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv4_3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv4_3/biases/Assign"
  op: "Assign"
  input: "conv4_3/biases"
  input: "conv4_3/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv4_3/biases/read"
  op: "Identity"
  input: "conv4_3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/biases"
      }
    }
  }
}
node {
  name: "conv4_3/conv"
  op: "Conv2D"
  input: "conv4_2/relu"
  input: "conv4_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv4_3/bias_add"
  op: "BiasAdd"
  input: "conv4_3/conv"
  input: "conv4_3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv4_3/relu"
  op: "Relu"
  input: "conv4_3/bias_add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "pool4/pool4"
  op: "MaxPool"
  input: "conv4_3/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "conv5_1/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv5_1/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.025515519082546234
      }
    }
  }
}
node {
  name: "conv5_1/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.025515519082546234
      }
    }
  }
}
node {
  name: "conv5_1/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv5_1/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv5_1/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv5_1/weights/Initializer/random_uniform/max"
  input: "conv5_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/weights"
      }
    }
  }
}
node {
  name: "conv5_1/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv5_1/weights/Initializer/random_uniform/RandomUniform"
  input: "conv5_1/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/weights"
      }
    }
  }
}
node {
  name: "conv5_1/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv5_1/weights/Initializer/random_uniform/mul"
  input: "conv5_1/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/weights"
      }
    }
  }
}
node {
  name: "conv5_1/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv5_1/weights/Assign"
  op: "Assign"
  input: "conv5_1/weights"
  input: "conv5_1/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv5_1/weights/read"
  op: "Identity"
  input: "conv5_1/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/weights"
      }
    }
  }
}
node {
  name: "conv5_1/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv5_1/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv5_1/biases/Assign"
  op: "Assign"
  input: "conv5_1/biases"
  input: "conv5_1/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv5_1/biases/read"
  op: "Identity"
  input: "conv5_1/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/biases"
      }
    }
  }
}
node {
  name: "conv5_1/conv"
  op: "Conv2D"
  input: "pool4/pool4"
  input: "conv5_1/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv5_1/bias_add"
  op: "BiasAdd"
  input: "conv5_1/conv"
  input: "conv5_1/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv5_1/relu"
  op: "Relu"
  input: "conv5_1/bias_add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv5_2/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv5_2/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.025515519082546234
      }
    }
  }
}
node {
  name: "conv5_2/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.025515519082546234
      }
    }
  }
}
node {
  name: "conv5_2/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv5_2/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv5_2/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv5_2/weights/Initializer/random_uniform/max"
  input: "conv5_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/weights"
      }
    }
  }
}
node {
  name: "conv5_2/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv5_2/weights/Initializer/random_uniform/RandomUniform"
  input: "conv5_2/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/weights"
      }
    }
  }
}
node {
  name: "conv5_2/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv5_2/weights/Initializer/random_uniform/mul"
  input: "conv5_2/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/weights"
      }
    }
  }
}
node {
  name: "conv5_2/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv5_2/weights/Assign"
  op: "Assign"
  input: "conv5_2/weights"
  input: "conv5_2/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv5_2/weights/read"
  op: "Identity"
  input: "conv5_2/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/weights"
      }
    }
  }
}
node {
  name: "conv5_2/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv5_2/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv5_2/biases/Assign"
  op: "Assign"
  input: "conv5_2/biases"
  input: "conv5_2/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv5_2/biases/read"
  op: "Identity"
  input: "conv5_2/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/biases"
      }
    }
  }
}
node {
  name: "conv5_2/conv"
  op: "Conv2D"
  input: "conv5_1/relu"
  input: "conv5_2/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv5_2/bias_add"
  op: "BiasAdd"
  input: "conv5_2/conv"
  input: "conv5_2/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv5_2/relu"
  op: "Relu"
  input: "conv5_2/bias_add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "conv5_3/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "conv5_3/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.025515519082546234
      }
    }
  }
}
node {
  name: "conv5_3/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.025515519082546234
      }
    }
  }
}
node {
  name: "conv5_3/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "conv5_3/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "conv5_3/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "conv5_3/weights/Initializer/random_uniform/max"
  input: "conv5_3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/weights"
      }
    }
  }
}
node {
  name: "conv5_3/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "conv5_3/weights/Initializer/random_uniform/RandomUniform"
  input: "conv5_3/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/weights"
      }
    }
  }
}
node {
  name: "conv5_3/weights/Initializer/random_uniform"
  op: "Add"
  input: "conv5_3/weights/Initializer/random_uniform/mul"
  input: "conv5_3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/weights"
      }
    }
  }
}
node {
  name: "conv5_3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 512
        }
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv5_3/weights/Assign"
  op: "Assign"
  input: "conv5_3/weights"
  input: "conv5_3/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv5_3/weights/read"
  op: "Identity"
  input: "conv5_3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/weights"
      }
    }
  }
}
node {
  name: "conv5_3/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 512
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "conv5_3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "conv5_3/biases/Assign"
  op: "Assign"
  input: "conv5_3/biases"
  input: "conv5_3/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "conv5_3/biases/read"
  op: "Identity"
  input: "conv5_3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/biases"
      }
    }
  }
}
node {
  name: "conv5_3/conv"
  op: "Conv2D"
  input: "conv5_2/relu"
  input: "conv5_3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "conv5_3/bias_add"
  op: "BiasAdd"
  input: "conv5_3/conv"
  input: "conv5_3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "conv5_3/relu"
  op: "Relu"
  input: "conv5_3/bias_add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "pool5/pool5"
  op: "MaxPool"
  input: "conv5_3/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "fc6/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "fc6/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.03608439117670059
      }
    }
  }
}
node {
  name: "fc6/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.03608439117670059
      }
    }
  }
}
node {
  name: "fc6/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "fc6/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "fc6/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "fc6/weights/Initializer/random_uniform/max"
  input: "fc6/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/weights"
      }
    }
  }
}
node {
  name: "fc6/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "fc6/weights/Initializer/random_uniform/RandomUniform"
  input: "fc6/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/weights"
      }
    }
  }
}
node {
  name: "fc6/weights/Initializer/random_uniform"
  op: "Add"
  input: "fc6/weights/Initializer/random_uniform/mul"
  input: "fc6/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/weights"
      }
    }
  }
}
node {
  name: "fc6/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 4096
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc6/weights/Assign"
  op: "Assign"
  input: "fc6/weights"
  input: "fc6/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc6/weights/read"
  op: "Identity"
  input: "fc6/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/weights"
      }
    }
  }
}
node {
  name: "fc6/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4096
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc6/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4096
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc6/biases/Assign"
  op: "Assign"
  input: "fc6/biases"
  input: "fc6/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc6/biases/read"
  op: "Identity"
  input: "fc6/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/biases"
      }
    }
  }
}
node {
  name: "fc6/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\000\002\000\000"
      }
    }
  }
}
node {
  name: "fc6/Reshape"
  op: "Reshape"
  input: "pool5/pool5"
  input: "fc6/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "fc6/MatMul"
  op: "MatMul"
  input: "fc6/Reshape"
  input: "fc6/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fc6/BiasAdd"
  op: "BiasAdd"
  input: "fc6/MatMul"
  input: "fc6/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fc6/Relu"
  op: "Relu"
  input: "fc6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "batch_normalization/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/gamma/Initializer/ones"
  op: "Fill"
  input: "batch_normalization/gamma/Initializer/ones/shape_as_tensor"
  input: "batch_normalization/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4096
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/gamma/Assign"
  op: "Assign"
  input: "batch_normalization/gamma"
  input: "batch_normalization/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/gamma/read"
  op: "Identity"
  input: "batch_normalization/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/beta/Initializer/zeros"
  op: "Fill"
  input: "batch_normalization/beta/Initializer/zeros/shape_as_tensor"
  input: "batch_normalization/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4096
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/beta/Assign"
  op: "Assign"
  input: "batch_normalization/beta"
  input: "batch_normalization/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/beta/read"
  op: "Identity"
  input: "batch_normalization/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "batch_normalization/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "batch_normalization/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4096
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization/moving_mean"
  input: "batch_normalization/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/moving_mean/read"
  op: "Identity"
  input: "batch_normalization/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Initializer/ones"
  op: "Fill"
  input: "batch_normalization/moving_variance/Initializer/ones/shape_as_tensor"
  input: "batch_normalization/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4096
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization/moving_variance"
  input: "batch_normalization/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization/moving_variance/read"
  op: "Identity"
  input: "batch_normalization/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/moments/mean"
  op: "Mean"
  input: "fc6/Relu"
  input: "batch_norm1/batch_normalization/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/moments/StopGradient"
  op: "StopGradient"
  input: "batch_norm1/batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "fc6/Relu"
  input: "batch_norm1/batch_normalization/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/moments/variance"
  op: "Mean"
  input: "batch_norm1/batch_normalization/moments/SquaredDifference"
  input: "batch_norm1/batch_normalization/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/moments/Squeeze"
  op: "Squeeze"
  input: "batch_norm1/batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/moments/Squeeze_1"
  op: "Squeeze"
  input: "batch_norm1/batch_normalization/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization/moving_mean/read"
  input: "batch_norm1/batch_normalization/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_norm1/batch_normalization/AssignMovingAvg/sub"
  input: "batch_norm1/batch_normalization/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization/moving_mean"
  input: "batch_norm1/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization/moving_variance/read"
  input: "batch_norm1/batch_normalization/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_norm1/batch_normalization/AssignMovingAvg_1/sub"
  input: "batch_norm1/batch_normalization/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization/moving_variance"
  input: "batch_norm1/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/batchnorm/add"
  op: "Add"
  input: "batch_norm1/batch_normalization/moments/Squeeze_1"
  input: "batch_norm1/batch_normalization/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_norm1/batch_normalization/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/batchnorm/mul"
  op: "Mul"
  input: "batch_norm1/batch_normalization/batchnorm/Rsqrt"
  input: "batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/batchnorm/mul_1"
  op: "Mul"
  input: "fc6/Relu"
  input: "batch_norm1/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/batchnorm/mul_2"
  op: "Mul"
  input: "batch_norm1/batch_normalization/moments/Squeeze"
  input: "batch_norm1/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization/beta/read"
  input: "batch_norm1/batch_normalization/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm1/batch_normalization/batchnorm/add_1"
  op: "Add"
  input: "batch_norm1/batch_normalization/batchnorm/mul_1"
  input: "batch_norm1/batch_normalization/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc7/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\020\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "fc7/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.027063293382525444
      }
    }
  }
}
node {
  name: "fc7/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.027063293382525444
      }
    }
  }
}
node {
  name: "fc7/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "fc7/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "fc7/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "fc7/weights/Initializer/random_uniform/max"
  input: "fc7/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/weights"
      }
    }
  }
}
node {
  name: "fc7/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "fc7/weights/Initializer/random_uniform/RandomUniform"
  input: "fc7/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/weights"
      }
    }
  }
}
node {
  name: "fc7/weights/Initializer/random_uniform"
  op: "Add"
  input: "fc7/weights/Initializer/random_uniform/mul"
  input: "fc7/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/weights"
      }
    }
  }
}
node {
  name: "fc7/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4096
        }
        dim {
          size: 4096
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc7/weights/Assign"
  op: "Assign"
  input: "fc7/weights"
  input: "fc7/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc7/weights/read"
  op: "Identity"
  input: "fc7/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/weights"
      }
    }
  }
}
node {
  name: "fc7/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 4096
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc7/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4096
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc7/biases/Assign"
  op: "Assign"
  input: "fc7/biases"
  input: "fc7/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc7/biases/read"
  op: "Identity"
  input: "fc7/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/biases"
      }
    }
  }
}
node {
  name: "fc7/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\000\020\000\000"
      }
    }
  }
}
node {
  name: "fc7/Reshape"
  op: "Reshape"
  input: "batch_norm1/batch_normalization/batchnorm/add_1"
  input: "fc7/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "fc7/MatMul"
  op: "MatMul"
  input: "fc7/Reshape"
  input: "fc7/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fc7/BiasAdd"
  op: "BiasAdd"
  input: "fc7/MatMul"
  input: "fc7/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fc7/Relu"
  op: "Relu"
  input: "fc7/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Initializer/ones"
  op: "Fill"
  input: "batch_normalization_1/gamma/Initializer/ones/shape_as_tensor"
  input: "batch_normalization_1/gamma/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_1/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4096
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/gamma/Assign"
  op: "Assign"
  input: "batch_normalization_1/gamma"
  input: "batch_normalization_1/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/gamma/read"
  op: "Identity"
  input: "batch_normalization_1/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/beta/Initializer/zeros"
  op: "Fill"
  input: "batch_normalization_1/beta/Initializer/zeros/shape_as_tensor"
  input: "batch_normalization_1/beta/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_1/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4096
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/beta/Assign"
  op: "Assign"
  input: "batch_normalization_1/beta"
  input: "batch_normalization_1/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/beta/read"
  op: "Identity"
  input: "batch_normalization_1/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Initializer/zeros"
  op: "Fill"
  input: "batch_normalization_1/moving_mean/Initializer/zeros/shape_as_tensor"
  input: "batch_normalization_1/moving_mean/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4096
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/Assign"
  op: "Assign"
  input: "batch_normalization_1/moving_mean"
  input: "batch_normalization_1/moving_mean/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/moving_mean/read"
  op: "Identity"
  input: "batch_normalization_1/moving_mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Initializer/ones/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Initializer/ones/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Initializer/ones"
  op: "Fill"
  input: "batch_normalization_1/moving_variance/Initializer/ones/shape_as_tensor"
  input: "batch_normalization_1/moving_variance/Initializer/ones/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4096
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/Assign"
  op: "Assign"
  input: "batch_normalization_1/moving_variance"
  input: "batch_normalization_1/moving_variance/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "batch_normalization_1/moving_variance/read"
  op: "Identity"
  input: "batch_normalization_1/moving_variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/moments/mean"
  op: "Mean"
  input: "fc7/Relu"
  input: "batch_norm2/batch_normalization/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/moments/StopGradient"
  op: "StopGradient"
  input: "batch_norm2/batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "fc7/Relu"
  input: "batch_norm2/batch_normalization/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/moments/variance"
  op: "Mean"
  input: "batch_norm2/batch_normalization/moments/SquaredDifference"
  input: "batch_norm2/batch_normalization/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/moments/Squeeze"
  op: "Squeeze"
  input: "batch_norm2/batch_normalization/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/moments/Squeeze_1"
  op: "Squeeze"
  input: "batch_norm2/batch_normalization/moments/variance"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 0
      }
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/AssignMovingAvg/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/AssignMovingAvg/sub"
  op: "Sub"
  input: "batch_normalization_1/moving_mean/read"
  input: "batch_norm2/batch_normalization/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/AssignMovingAvg/mul"
  op: "Mul"
  input: "batch_norm2/batch_normalization/AssignMovingAvg/sub"
  input: "batch_norm2/batch_normalization/AssignMovingAvg/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/AssignMovingAvg"
  op: "AssignSub"
  input: "batch_normalization_1/moving_mean"
  input: "batch_norm2/batch_normalization/AssignMovingAvg/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_mean"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/AssignMovingAvg_1/decay"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/AssignMovingAvg_1/sub"
  op: "Sub"
  input: "batch_normalization_1/moving_variance/read"
  input: "batch_norm2/batch_normalization/moments/Squeeze_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/AssignMovingAvg_1/mul"
  op: "Mul"
  input: "batch_norm2/batch_normalization/AssignMovingAvg_1/sub"
  input: "batch_norm2/batch_normalization/AssignMovingAvg_1/decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/AssignMovingAvg_1"
  op: "AssignSub"
  input: "batch_normalization_1/moving_variance"
  input: "batch_norm2/batch_normalization/AssignMovingAvg_1/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/moving_variance"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/batchnorm/add"
  op: "Add"
  input: "batch_norm2/batch_normalization/moments/Squeeze_1"
  input: "batch_norm2/batch_normalization/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "batch_norm2/batch_normalization/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/batchnorm/mul"
  op: "Mul"
  input: "batch_norm2/batch_normalization/batchnorm/Rsqrt"
  input: "batch_normalization_1/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/batchnorm/mul_1"
  op: "Mul"
  input: "fc7/Relu"
  input: "batch_norm2/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/batchnorm/mul_2"
  op: "Mul"
  input: "batch_norm2/batch_normalization/moments/Squeeze"
  input: "batch_norm2/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/batchnorm/sub"
  op: "Sub"
  input: "batch_normalization_1/beta/read"
  input: "batch_norm2/batch_normalization/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "batch_norm2/batch_normalization/batchnorm/add_1"
  op: "Add"
  input: "batch_norm2/batch_normalization/batchnorm/mul_1"
  input: "batch_norm2/batch_normalization/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "fc8/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\020\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "fc8/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.038226641714572906
      }
    }
  }
}
node {
  name: "fc8/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.038226641714572906
      }
    }
  }
}
node {
  name: "fc8/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "fc8/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "fc8/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "fc8/weights/Initializer/random_uniform/max"
  input: "fc8/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/weights"
      }
    }
  }
}
node {
  name: "fc8/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "fc8/weights/Initializer/random_uniform/RandomUniform"
  input: "fc8/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/weights"
      }
    }
  }
}
node {
  name: "fc8/weights/Initializer/random_uniform"
  op: "Add"
  input: "fc8/weights/Initializer/random_uniform/mul"
  input: "fc8/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/weights"
      }
    }
  }
}
node {
  name: "fc8/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 4096
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc8/weights/Assign"
  op: "Assign"
  input: "fc8/weights"
  input: "fc8/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc8/weights/read"
  op: "Identity"
  input: "fc8/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/weights"
      }
    }
  }
}
node {
  name: "fc8/biases/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fc8/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fc8/biases/Assign"
  op: "Assign"
  input: "fc8/biases"
  input: "fc8/biases/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fc8/biases/read"
  op: "Identity"
  input: "fc8/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/biases"
      }
    }
  }
}
node {
  name: "fc8/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\000\020\000\000"
      }
    }
  }
}
node {
  name: "fc8/Reshape"
  op: "Reshape"
  input: "batch_norm2/batch_normalization/batchnorm/add_1"
  input: "fc8/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "fc8/MatMul"
  op: "MatMul"
  input: "fc8/Reshape"
  input: "fc8/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fc8/BiasAdd"
  op: "BiasAdd"
  input: "fc8/MatMul"
  input: "fc8/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "fc8/Relu"
  op: "Relu"
  input: "fc8/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/cross-entropy/labels_stop_gradient"
  op: "StopGradient"
  input: "y"
  attr {
    key: "T"
    value {
      type: DT_INT16
    }
  }
}
node {
  name: "loss/cross-entropy/Cast"
  op: "Cast"
  input: "loss/cross-entropy/labels_stop_gradient"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT16
    }
  }
}
node {
  name: "loss/cross-entropy/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss/cross-entropy/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "loss/cross-entropy/Rank_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss/cross-entropy/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "loss/cross-entropy/Sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/cross-entropy/Sub"
  op: "Sub"
  input: "loss/cross-entropy/Rank_1"
  input: "loss/cross-entropy/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/cross-entropy/Slice/begin"
  op: "Pack"
  input: "loss/cross-entropy/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/cross-entropy/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/cross-entropy/Slice"
  op: "Slice"
  input: "loss/cross-entropy/Shape_1"
  input: "loss/cross-entropy/Slice/begin"
  input: "loss/cross-entropy/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/cross-entropy/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/cross-entropy/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/cross-entropy/concat"
  op: "ConcatV2"
  input: "loss/cross-entropy/concat/values_0"
  input: "loss/cross-entropy/Slice"
  input: "loss/cross-entropy/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/cross-entropy/Reshape"
  op: "Reshape"
  input: "fc8/Relu"
  input: "loss/cross-entropy/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/cross-entropy/Rank_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "loss/cross-entropy/Shape_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "loss/cross-entropy/Sub_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/cross-entropy/Sub_1"
  op: "Sub"
  input: "loss/cross-entropy/Rank_2"
  input: "loss/cross-entropy/Sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/cross-entropy/Slice_1/begin"
  op: "Pack"
  input: "loss/cross-entropy/Sub_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/cross-entropy/Slice_1/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/cross-entropy/Slice_1"
  op: "Slice"
  input: "loss/cross-entropy/Shape_2"
  input: "loss/cross-entropy/Slice_1/begin"
  input: "loss/cross-entropy/Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/cross-entropy/concat_1/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "loss/cross-entropy/concat_1/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/cross-entropy/concat_1"
  op: "ConcatV2"
  input: "loss/cross-entropy/concat_1/values_0"
  input: "loss/cross-entropy/Slice_1"
  input: "loss/cross-entropy/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/cross-entropy/Reshape_1"
  op: "Reshape"
  input: "loss/cross-entropy/Cast"
  input: "loss/cross-entropy/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/cross-entropy"
  op: "SoftmaxCrossEntropyWithLogits"
  input: "loss/cross-entropy/Reshape"
  input: "loss/cross-entropy/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "loss/cross-entropy/Sub_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "loss/cross-entropy/Sub_2"
  op: "Sub"
  input: "loss/cross-entropy/Rank"
  input: "loss/cross-entropy/Sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/cross-entropy/Slice_2/begin"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/cross-entropy/Slice_2/size"
  op: "Pack"
  input: "loss/cross-entropy/Sub_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "loss/cross-entropy/Slice_2"
  op: "Slice"
  input: "loss/cross-entropy/Shape"
  input: "loss/cross-entropy/Slice_2/begin"
  input: "loss/cross-entropy/Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/cross-entropy/Reshape_2"
  op: "Reshape"
  input: "loss/cross-entropy"
  input: "loss/cross-entropy/Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "loss/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "loss/loss"
  op: "Mean"
  input: "loss/cross-entropy/Reshape_2"
  input: "loss/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "loss/loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy/ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "accuracy/ArgMax"
  op: "ArgMax"
  input: "fc8/Relu"
  input: "accuracy/ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "accuracy/ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "accuracy/ArgMax_1"
  op: "ArgMax"
  input: "y"
  input: "accuracy/ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_INT16
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "accuracy/Equal"
  op: "Equal"
  input: "accuracy/ArgMax"
  input: "accuracy/ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "accuracy/Cast"
  op: "Cast"
  input: "accuracy/Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "accuracy/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "accuracy/Mean"
  op: "Mean"
  input: "accuracy/Cast"
  input: "accuracy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "accuracy/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 100.0
      }
    }
  }
}
node {
  name: "accuracy/mul"
  op: "Mul"
  input: "accuracy/Mean"
  input: "accuracy/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "accuracy/tags"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "accuracy"
      }
    }
  }
}
node {
  name: "accuracy"
  op: "ScalarSummary"
  input: "accuracy/tags"
  input: "accuracy/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer/gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/Fill"
  op: "Fill"
  input: "optimizer/gradients/Shape"
  input: "optimizer/gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/loss/loss_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/loss_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/Fill"
  input: "optimizer/gradients/loss/loss_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/loss/loss_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/loss_grad/Tile"
  op: "Tile"
  input: "optimizer/gradients/loss/loss_grad/Reshape"
  input: "optimizer/gradients/loss/loss_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/loss/loss_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/loss_grad/truediv"
  op: "RealDiv"
  input: "optimizer/gradients/loss/loss_grad/Tile"
  input: "optimizer/gradients/loss/loss_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/loss/cross-entropy/Reshape_2_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/cross-entropy/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/loss/loss_grad/truediv"
  input: "optimizer/gradients/loss/cross-entropy/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/zeros_like"
  op: "ZerosLike"
  input: "loss/cross-entropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/loss/cross-entropy_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/cross-entropy_grad/ExpandDims"
  op: "ExpandDims"
  input: "optimizer/gradients/loss/cross-entropy/Reshape_2_grad/Reshape"
  input: "optimizer/gradients/loss/cross-entropy_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/loss/cross-entropy_grad/mul"
  op: "Mul"
  input: "optimizer/gradients/loss/cross-entropy_grad/ExpandDims"
  input: "loss/cross-entropy:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/loss/cross-entropy_grad/LogSoftmax"
  op: "LogSoftmax"
  input: "loss/cross-entropy/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/loss/cross-entropy_grad/Neg"
  op: "Neg"
  input: "optimizer/gradients/loss/cross-entropy_grad/LogSoftmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/loss/cross-entropy_grad/ExpandDims_1/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/cross-entropy_grad/ExpandDims_1"
  op: "ExpandDims"
  input: "optimizer/gradients/loss/cross-entropy/Reshape_2_grad/Reshape"
  input: "optimizer/gradients/loss/cross-entropy_grad/ExpandDims_1/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/loss/cross-entropy_grad/mul_1"
  op: "Mul"
  input: "optimizer/gradients/loss/cross-entropy_grad/ExpandDims_1"
  input: "optimizer/gradients/loss/cross-entropy_grad/Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/loss/cross-entropy_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/loss/cross-entropy_grad/mul"
  input: "^optimizer/gradients/loss/cross-entropy_grad/mul_1"
}
node {
  name: "optimizer/gradients/loss/cross-entropy_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/loss/cross-entropy_grad/mul"
  input: "^optimizer/gradients/loss/cross-entropy_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/loss/cross-entropy_grad/mul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/cross-entropy_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/loss/cross-entropy_grad/mul_1"
  input: "^optimizer/gradients/loss/cross-entropy_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/loss/cross-entropy_grad/mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/cross-entropy/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/loss/cross-entropy/Reshape_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/loss/cross-entropy_grad/tuple/control_dependency"
  input: "optimizer/gradients/loss/cross-entropy/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/fc8/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/loss/cross-entropy/Reshape_grad/Reshape"
  input: "fc8/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/fc8/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/fc8/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/fc8/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/fc8/BiasAdd_grad/BiasAddGrad"
  input: "^optimizer/gradients/fc8/Relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/fc8/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/fc8/Relu_grad/ReluGrad"
  input: "^optimizer/gradients/fc8/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/fc8/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc8/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/fc8/BiasAdd_grad/BiasAddGrad"
  input: "^optimizer/gradients/fc8/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/fc8/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc8/MatMul_grad/MatMul"
  op: "MatMul"
  input: "optimizer/gradients/fc8/BiasAdd_grad/tuple/control_dependency"
  input: "fc8/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/fc8/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fc8/Reshape"
  input: "optimizer/gradients/fc8/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/fc8/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/fc8/MatMul_grad/MatMul"
  input: "^optimizer/gradients/fc8/MatMul_grad/MatMul_1"
}
node {
  name: "optimizer/gradients/fc8/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/fc8/MatMul_grad/MatMul"
  input: "^optimizer/gradients/fc8/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/fc8/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc8/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/fc8/MatMul_grad/MatMul_1"
  input: "^optimizer/gradients/fc8/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/fc8/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc8/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc8/Reshape_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/fc8/MatMul_grad/tuple/control_dependency"
  input: "optimizer/gradients/fc8/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Shape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "optimizer/gradients/fc8/Reshape_grad/Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Sum"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "optimizer/gradients/fc8/Reshape_grad/Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Sum_1"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Reshape"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Reshape_1"
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Reshape"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Reshape_1"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Shape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Mul"
  op: "Mul"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  input: "batch_norm2/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Mul"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Sum"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fc7/Relu"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Mul_1"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Sum_1"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Reshape"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Reshape"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/sub_grad/Neg"
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/sub_grad/Neg"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/batchnorm/sub_grad/Neg"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_2_grad/Mul"
  op: "Mul"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "batch_norm2/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_2_grad/Mul_1"
  op: "Mul"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "batch_norm2/batch_normalization/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_2_grad/Mul"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_2_grad/Mul_1"
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_2_grad/Mul"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_2_grad/Mul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_2_grad/Mul_1"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_2_grad/Mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/Squeeze_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/AddN"
  op: "AddN"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency_1"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_grad/Mul"
  op: "Mul"
  input: "optimizer/gradients/AddN"
  input: "batch_normalization_1/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_grad/Mul_1"
  op: "Mul"
  input: "optimizer/gradients/AddN"
  input: "batch_norm2/batch_normalization/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_grad/Mul"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_grad/Mul_1"
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_grad/Mul"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_grad/Mul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_grad/Mul_1"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_grad/Mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "batch_norm2/batch_normalization/batchnorm/Rsqrt"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Shape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Sum"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Sum_1"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Reshape"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Reshape_1"
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Reshape"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Reshape_1"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/Squeeze_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/add_grad/tuple/control_dependency"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/add"
  op: "Add"
  input: "batch_norm2/batch_normalization/moments/variance/reduction_indices"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/mod"
  op: "FloorMod"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/add"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/range"
  op: "Range"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/range/start"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Size"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Fill"
  op: "Fill"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape_1"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/range"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/mod"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/DynamicStitch"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/Squeeze_1_grad/Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Tile"
  op: "Tile"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Tile"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Shape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/truediv"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/mul"
  op: "Mul"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/scalar"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "fc7/Relu"
  input: "batch_norm2/batch_normalization/moments/StopGradient"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/mul"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/mul_1"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Sum"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/mul_1"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Sum_1"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Neg"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Reshape"
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Reshape"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Neg"
  input: "^optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/Neg"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/add"
  op: "Add"
  input: "batch_norm2/batch_normalization/moments/mean/reduction_indices"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/mod"
  op: "FloorMod"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/add"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/range"
  op: "Range"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/range/start"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Size"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Fill"
  op: "Fill"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape_1"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/range"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/mod"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/DynamicStitch"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/Squeeze_grad/Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Tile"
  op: "Tile"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Reshape"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Tile"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/AddN_1"
  op: "AddN"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "optimizer/gradients/batch_norm2/batch_normalization/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc7/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/AddN_1"
  input: "fc7/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/fc7/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/fc7/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/fc7/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/fc7/BiasAdd_grad/BiasAddGrad"
  input: "^optimizer/gradients/fc7/Relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/fc7/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/fc7/Relu_grad/ReluGrad"
  input: "^optimizer/gradients/fc7/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/fc7/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc7/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/fc7/BiasAdd_grad/BiasAddGrad"
  input: "^optimizer/gradients/fc7/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/fc7/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc7/MatMul_grad/MatMul"
  op: "MatMul"
  input: "optimizer/gradients/fc7/BiasAdd_grad/tuple/control_dependency"
  input: "fc7/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/fc7/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fc7/Reshape"
  input: "optimizer/gradients/fc7/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/fc7/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/fc7/MatMul_grad/MatMul"
  input: "^optimizer/gradients/fc7/MatMul_grad/MatMul_1"
}
node {
  name: "optimizer/gradients/fc7/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/fc7/MatMul_grad/MatMul"
  input: "^optimizer/gradients/fc7/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/fc7/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc7/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/fc7/MatMul_grad/MatMul_1"
  input: "^optimizer/gradients/fc7/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/fc7/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc7/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc7/Reshape_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/fc7/MatMul_grad/tuple/control_dependency"
  input: "optimizer/gradients/fc7/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Shape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Sum"
  op: "Sum"
  input: "optimizer/gradients/fc7/Reshape_grad/Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Sum"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Sum_1"
  op: "Sum"
  input: "optimizer/gradients/fc7/Reshape_grad/Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Sum_1"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Reshape"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Reshape_1"
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Reshape"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Reshape_1"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Shape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Mul"
  op: "Mul"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  input: "batch_norm1/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Sum"
  op: "Sum"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Mul"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Sum"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Mul_1"
  op: "Mul"
  input: "fc6/Relu"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Sum_1"
  op: "Sum"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Mul_1"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Sum_1"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Reshape"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Reshape"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/sub_grad/Neg"
  op: "Neg"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/sub_grad/Neg"
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/sub_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/tuple/control_dependency_1"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/sub_grad/Neg"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/sub_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/batchnorm/sub_grad/Neg"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_2_grad/Mul"
  op: "Mul"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "batch_norm1/batch_normalization/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_2_grad/Mul_1"
  op: "Mul"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/sub_grad/tuple/control_dependency_1"
  input: "batch_norm1/batch_normalization/moments/Squeeze"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_2_grad/Mul"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_2_grad/Mul_1"
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_2_grad/Mul"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_2_grad/Mul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_2_grad/Mul_1"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_2_grad/Mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/Squeeze_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/Squeeze_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/Squeeze_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/AddN_2"
  op: "AddN"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency_1"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_grad/Mul"
  op: "Mul"
  input: "optimizer/gradients/AddN_2"
  input: "batch_normalization/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_grad/Mul_1"
  op: "Mul"
  input: "optimizer/gradients/AddN_2"
  input: "batch_norm1/batch_normalization/batchnorm/Rsqrt"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_grad/Mul"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_grad/Mul_1"
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_grad/Mul"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_grad/Mul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_grad/Mul_1"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_grad/Mul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  op: "RsqrtGrad"
  input: "batch_norm1/batch_normalization/batchnorm/Rsqrt"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 4096
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Shape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Sum"
  op: "Sum"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Sum"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Sum_1"
  op: "Sum"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/Rsqrt_grad/RsqrtGrad"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Reshape_1"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Sum_1"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Reshape"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Reshape_1"
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Reshape"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Reshape_1"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/Squeeze_1_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/Squeeze_1_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/add_grad/tuple/control_dependency"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/Squeeze_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/add"
  op: "Add"
  input: "batch_norm1/batch_normalization/moments/variance/reduction_indices"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/mod"
  op: "FloorMod"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/add"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/range"
  op: "Range"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/range/start"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Size"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Fill"
  op: "Fill"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape_1"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/range"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/mod"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Maximum"
  op: "Maximum"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/DynamicStitch"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/floordiv"
  op: "FloorDiv"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/Squeeze_1_grad/Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Tile"
  op: "Tile"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/truediv"
  op: "RealDiv"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Tile"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Shape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/scalar"
  op: "Const"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/truediv"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 2.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/mul"
  op: "Mul"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/scalar"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/sub"
  op: "Sub"
  input: "fc6/Relu"
  input: "batch_norm1/batch_normalization/moments/StopGradient"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/moments/variance_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/mul_1"
  op: "Mul"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/mul"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Sum"
  op: "Sum"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/mul_1"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Sum"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Sum_1"
  op: "Sum"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/mul_1"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Reshape_1"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Sum_1"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Neg"
  op: "Neg"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Neg"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Reshape"
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Reshape"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Reshape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Neg"
  input: "^optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/Neg"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: " \000\000\000\000\020\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/add"
  op: "Add"
  input: "batch_norm1/batch_normalization/moments/mean/reduction_indices"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/mod"
  op: "FloorMod"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/add"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/range"
  op: "Range"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/range/start"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Size"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Fill"
  op: "Fill"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape_1"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/range"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/mod"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Maximum"
  op: "Maximum"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/DynamicStitch"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/floordiv"
  op: "FloorDiv"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Shape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/Squeeze_grad/Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Tile"
  op: "Tile"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Reshape"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 32.0
      }
    }
  }
}
node {
  name: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/truediv"
  op: "RealDiv"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Tile"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/AddN_3"
  op: "AddN"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/tuple/control_dependency"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/SquaredDifference_grad/tuple/control_dependency"
  input: "optimizer/gradients/batch_norm1/batch_normalization/moments/mean_grad/truediv"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc6/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/AddN_3"
  input: "fc6/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/fc6/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/fc6/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/fc6/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/fc6/BiasAdd_grad/BiasAddGrad"
  input: "^optimizer/gradients/fc6/Relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/fc6/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/fc6/Relu_grad/ReluGrad"
  input: "^optimizer/gradients/fc6/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/fc6/Relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc6/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/fc6/BiasAdd_grad/BiasAddGrad"
  input: "^optimizer/gradients/fc6/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/fc6/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc6/MatMul_grad/MatMul"
  op: "MatMul"
  input: "optimizer/gradients/fc6/BiasAdd_grad/tuple/control_dependency"
  input: "fc6/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/fc6/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fc6/Reshape"
  input: "optimizer/gradients/fc6/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/gradients/fc6/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/fc6/MatMul_grad/MatMul"
  input: "^optimizer/gradients/fc6/MatMul_grad/MatMul_1"
}
node {
  name: "optimizer/gradients/fc6/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/fc6/MatMul_grad/MatMul"
  input: "^optimizer/gradients/fc6/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/fc6/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc6/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/fc6/MatMul_grad/MatMul_1"
  input: "^optimizer/gradients/fc6/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/fc6/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc6/Reshape_grad/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: " \000\000\000\001\000\000\000\001\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/fc6/Reshape_grad/Reshape"
  op: "Reshape"
  input: "optimizer/gradients/fc6/MatMul_grad/tuple/control_dependency"
  input: "optimizer/gradients/fc6/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/pool5/pool5_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "conv5_3/relu"
  input: "pool5/pool5"
  input: "optimizer/gradients/fc6/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_3/relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/pool5/pool5_grad/MaxPoolGrad"
  input: "conv5_3/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/conv5_3/bias_add_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/conv5_3/relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/conv5_3/bias_add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv5_3/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv5_3/relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/conv5_3/bias_add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv5_3/relu_grad/ReluGrad"
  input: "^optimizer/gradients/conv5_3/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv5_3/relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_3/bias_add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv5_3/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv5_3/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv5_3/bias_add_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_3/conv_grad/ShapeN"
  op: "ShapeN"
  input: "conv5_2/relu"
  input: "conv5_3/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/conv5_3/conv_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: " \000\000\000\002\000\000\000\002\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_3/conv_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_3/conv_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer/gradients/conv5_3/conv_grad/Const"
  input: "conv5_3/weights/read"
  input: "optimizer/gradients/conv5_3/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv5_3/conv_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv5_2/relu"
  input: "optimizer/gradients/conv5_3/conv_grad/Const_1"
  input: "optimizer/gradients/conv5_3/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv5_3/conv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv5_3/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv5_3/conv_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer/gradients/conv5_3/conv_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv5_3/conv_grad/Conv2DBackpropInput"
  input: "^optimizer/gradients/conv5_3/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv5_3/conv_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_3/conv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv5_3/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv5_3/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv5_3/conv_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_2/relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/conv5_3/conv_grad/tuple/control_dependency"
  input: "conv5_2/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/conv5_2/bias_add_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/conv5_2/relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/conv5_2/bias_add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv5_2/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv5_2/relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/conv5_2/bias_add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv5_2/relu_grad/ReluGrad"
  input: "^optimizer/gradients/conv5_2/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv5_2/relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_2/bias_add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv5_2/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv5_2/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv5_2/bias_add_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_2/conv_grad/ShapeN"
  op: "ShapeN"
  input: "conv5_1/relu"
  input: "conv5_2/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/conv5_2/conv_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: " \000\000\000\002\000\000\000\002\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_2/conv_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_2/conv_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer/gradients/conv5_2/conv_grad/Const"
  input: "conv5_2/weights/read"
  input: "optimizer/gradients/conv5_2/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv5_2/conv_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv5_1/relu"
  input: "optimizer/gradients/conv5_2/conv_grad/Const_1"
  input: "optimizer/gradients/conv5_2/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv5_2/conv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv5_2/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv5_2/conv_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer/gradients/conv5_2/conv_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv5_2/conv_grad/Conv2DBackpropInput"
  input: "^optimizer/gradients/conv5_2/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv5_2/conv_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_2/conv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv5_2/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv5_2/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv5_2/conv_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_1/relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/conv5_2/conv_grad/tuple/control_dependency"
  input: "conv5_1/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/conv5_1/bias_add_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/conv5_1/relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/conv5_1/bias_add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv5_1/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv5_1/relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/conv5_1/bias_add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv5_1/relu_grad/ReluGrad"
  input: "^optimizer/gradients/conv5_1/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv5_1/relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_1/bias_add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv5_1/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv5_1/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv5_1/bias_add_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_1/conv_grad/ShapeN"
  op: "ShapeN"
  input: "pool4/pool4"
  input: "conv5_1/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/conv5_1/conv_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: " \000\000\000\002\000\000\000\002\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_1/conv_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_1/conv_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer/gradients/conv5_1/conv_grad/Const"
  input: "conv5_1/weights/read"
  input: "optimizer/gradients/conv5_1/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv5_1/conv_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "pool4/pool4"
  input: "optimizer/gradients/conv5_1/conv_grad/Const_1"
  input: "optimizer/gradients/conv5_1/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv5_1/conv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv5_1/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv5_1/conv_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer/gradients/conv5_1/conv_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv5_1/conv_grad/Conv2DBackpropInput"
  input: "^optimizer/gradients/conv5_1/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv5_1/conv_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv5_1/conv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv5_1/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv5_1/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv5_1/conv_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "optimizer/gradients/pool4/pool4_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "conv4_3/relu"
  input: "pool4/pool4"
  input: "optimizer/gradients/conv5_1/conv_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_3/relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/pool4/pool4_grad/MaxPoolGrad"
  input: "conv4_3/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/conv4_3/bias_add_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/conv4_3/relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/conv4_3/bias_add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv4_3/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv4_3/relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/conv4_3/bias_add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv4_3/relu_grad/ReluGrad"
  input: "^optimizer/gradients/conv4_3/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv4_3/relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_3/bias_add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv4_3/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv4_3/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv4_3/bias_add_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_3/conv_grad/ShapeN"
  op: "ShapeN"
  input: "conv4_2/relu"
  input: "conv4_3/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/conv4_3/conv_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: " \000\000\000\004\000\000\000\004\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_3/conv_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_3/conv_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer/gradients/conv4_3/conv_grad/Const"
  input: "conv4_3/weights/read"
  input: "optimizer/gradients/conv4_3/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv4_3/conv_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv4_2/relu"
  input: "optimizer/gradients/conv4_3/conv_grad/Const_1"
  input: "optimizer/gradients/conv4_3/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv4_3/conv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv4_3/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv4_3/conv_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer/gradients/conv4_3/conv_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv4_3/conv_grad/Conv2DBackpropInput"
  input: "^optimizer/gradients/conv4_3/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv4_3/conv_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_3/conv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv4_3/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv4_3/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv4_3/conv_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_2/relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/conv4_3/conv_grad/tuple/control_dependency"
  input: "conv4_2/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/conv4_2/bias_add_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/conv4_2/relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/conv4_2/bias_add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv4_2/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv4_2/relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/conv4_2/bias_add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv4_2/relu_grad/ReluGrad"
  input: "^optimizer/gradients/conv4_2/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv4_2/relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_2/bias_add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv4_2/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv4_2/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv4_2/bias_add_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_2/conv_grad/ShapeN"
  op: "ShapeN"
  input: "conv4_1/relu"
  input: "conv4_2/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/conv4_2/conv_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: " \000\000\000\004\000\000\000\004\000\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_2/conv_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\002\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_2/conv_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer/gradients/conv4_2/conv_grad/Const"
  input: "conv4_2/weights/read"
  input: "optimizer/gradients/conv4_2/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv4_2/conv_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv4_1/relu"
  input: "optimizer/gradients/conv4_2/conv_grad/Const_1"
  input: "optimizer/gradients/conv4_2/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv4_2/conv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv4_2/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv4_2/conv_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer/gradients/conv4_2/conv_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv4_2/conv_grad/Conv2DBackpropInput"
  input: "^optimizer/gradients/conv4_2/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv4_2/conv_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_2/conv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv4_2/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv4_2/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv4_2/conv_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_1/relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/conv4_2/conv_grad/tuple/control_dependency"
  input: "conv4_1/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/conv4_1/bias_add_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/conv4_1/relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/conv4_1/bias_add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv4_1/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv4_1/relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/conv4_1/bias_add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv4_1/relu_grad/ReluGrad"
  input: "^optimizer/gradients/conv4_1/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv4_1/relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_1/bias_add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv4_1/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv4_1/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv4_1/bias_add_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_1/conv_grad/ShapeN"
  op: "ShapeN"
  input: "pool3/pool3"
  input: "conv4_1/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/conv4_1/conv_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: " \000\000\000\004\000\000\000\004\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_1/conv_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\002\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_1/conv_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer/gradients/conv4_1/conv_grad/Const"
  input: "conv4_1/weights/read"
  input: "optimizer/gradients/conv4_1/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv4_1/conv_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "pool3/pool3"
  input: "optimizer/gradients/conv4_1/conv_grad/Const_1"
  input: "optimizer/gradients/conv4_1/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv4_1/conv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv4_1/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv4_1/conv_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer/gradients/conv4_1/conv_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv4_1/conv_grad/Conv2DBackpropInput"
  input: "^optimizer/gradients/conv4_1/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv4_1/conv_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv4_1/conv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv4_1/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv4_1/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv4_1/conv_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "optimizer/gradients/pool3/pool3_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "conv3_3/relu"
  input: "pool3/pool3"
  input: "optimizer/gradients/conv4_1/conv_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_3/relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/pool3/pool3_grad/MaxPoolGrad"
  input: "conv3_3/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/conv3_3/bias_add_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/conv3_3/relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/conv3_3/bias_add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv3_3/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv3_3/relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/conv3_3/bias_add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv3_3/relu_grad/ReluGrad"
  input: "^optimizer/gradients/conv3_3/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv3_3/relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_3/bias_add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv3_3/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv3_3/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv3_3/bias_add_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_3/conv_grad/ShapeN"
  op: "ShapeN"
  input: "conv3_2/relu"
  input: "conv3_3/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/conv3_3/conv_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: " \000\000\000\010\000\000\000\010\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_3/conv_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_3/conv_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer/gradients/conv3_3/conv_grad/Const"
  input: "conv3_3/weights/read"
  input: "optimizer/gradients/conv3_3/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv3_3/conv_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv3_2/relu"
  input: "optimizer/gradients/conv3_3/conv_grad/Const_1"
  input: "optimizer/gradients/conv3_3/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv3_3/conv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv3_3/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv3_3/conv_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer/gradients/conv3_3/conv_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv3_3/conv_grad/Conv2DBackpropInput"
  input: "^optimizer/gradients/conv3_3/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv3_3/conv_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_3/conv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv3_3/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv3_3/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv3_3/conv_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_2/relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/conv3_3/conv_grad/tuple/control_dependency"
  input: "conv3_2/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/conv3_2/bias_add_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/conv3_2/relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/conv3_2/bias_add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv3_2/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv3_2/relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/conv3_2/bias_add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv3_2/relu_grad/ReluGrad"
  input: "^optimizer/gradients/conv3_2/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv3_2/relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_2/bias_add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv3_2/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv3_2/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv3_2/bias_add_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_2/conv_grad/ShapeN"
  op: "ShapeN"
  input: "conv3_1/relu"
  input: "conv3_2/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/conv3_2/conv_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: " \000\000\000\010\000\000\000\010\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_2/conv_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\000\001\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_2/conv_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer/gradients/conv3_2/conv_grad/Const"
  input: "conv3_2/weights/read"
  input: "optimizer/gradients/conv3_2/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv3_2/conv_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv3_1/relu"
  input: "optimizer/gradients/conv3_2/conv_grad/Const_1"
  input: "optimizer/gradients/conv3_2/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv3_2/conv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv3_2/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv3_2/conv_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer/gradients/conv3_2/conv_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv3_2/conv_grad/Conv2DBackpropInput"
  input: "^optimizer/gradients/conv3_2/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv3_2/conv_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_2/conv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv3_2/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv3_2/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv3_2/conv_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_1/relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/conv3_2/conv_grad/tuple/control_dependency"
  input: "conv3_1/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/conv3_1/bias_add_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/conv3_1/relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/conv3_1/bias_add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv3_1/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv3_1/relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/conv3_1/bias_add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv3_1/relu_grad/ReluGrad"
  input: "^optimizer/gradients/conv3_1/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv3_1/relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_1/bias_add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv3_1/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv3_1/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv3_1/bias_add_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_1/conv_grad/ShapeN"
  op: "ShapeN"
  input: "pool2/pool2"
  input: "conv3_1/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/conv3_1/conv_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: " \000\000\000\010\000\000\000\010\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_1/conv_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_1/conv_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer/gradients/conv3_1/conv_grad/Const"
  input: "conv3_1/weights/read"
  input: "optimizer/gradients/conv3_1/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv3_1/conv_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "pool2/pool2"
  input: "optimizer/gradients/conv3_1/conv_grad/Const_1"
  input: "optimizer/gradients/conv3_1/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv3_1/conv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv3_1/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv3_1/conv_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer/gradients/conv3_1/conv_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv3_1/conv_grad/Conv2DBackpropInput"
  input: "^optimizer/gradients/conv3_1/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv3_1/conv_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv3_1/conv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv3_1/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv3_1/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv3_1/conv_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "optimizer/gradients/pool2/pool2_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "conv2_2/relu"
  input: "pool2/pool2"
  input: "optimizer/gradients/conv3_1/conv_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv2_2/relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/pool2/pool2_grad/MaxPoolGrad"
  input: "conv2_2/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/conv2_2/bias_add_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/conv2_2/relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/conv2_2/bias_add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv2_2/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv2_2/relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/conv2_2/bias_add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv2_2/relu_grad/ReluGrad"
  input: "^optimizer/gradients/conv2_2/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv2_2/relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv2_2/bias_add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv2_2/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv2_2/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv2_2/bias_add_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv2_2/conv_grad/ShapeN"
  op: "ShapeN"
  input: "conv2_1/relu"
  input: "conv2_2/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/conv2_2/conv_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: " \000\000\000\020\000\000\000\020\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv2_2/conv_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv2_2/conv_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer/gradients/conv2_2/conv_grad/Const"
  input: "conv2_2/weights/read"
  input: "optimizer/gradients/conv2_2/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv2_2/conv_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv2_1/relu"
  input: "optimizer/gradients/conv2_2/conv_grad/Const_1"
  input: "optimizer/gradients/conv2_2/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv2_2/conv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv2_2/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv2_2/conv_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer/gradients/conv2_2/conv_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv2_2/conv_grad/Conv2DBackpropInput"
  input: "^optimizer/gradients/conv2_2/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv2_2/conv_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv2_2/conv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv2_2/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv2_2/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv2_2/conv_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv2_1/relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/conv2_2/conv_grad/tuple/control_dependency"
  input: "conv2_1/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/conv2_1/bias_add_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/conv2_1/relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/conv2_1/bias_add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv2_1/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv2_1/relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/conv2_1/bias_add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv2_1/relu_grad/ReluGrad"
  input: "^optimizer/gradients/conv2_1/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv2_1/relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv2_1/bias_add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv2_1/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv2_1/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv2_1/bias_add_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv2_1/conv_grad/ShapeN"
  op: "ShapeN"
  input: "pool1/pool1"
  input: "conv2_1/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/conv2_1/conv_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: " \000\000\000\020\000\000\000\020\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv2_1/conv_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv2_1/conv_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer/gradients/conv2_1/conv_grad/Const"
  input: "conv2_1/weights/read"
  input: "optimizer/gradients/conv2_1/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv2_1/conv_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "pool1/pool1"
  input: "optimizer/gradients/conv2_1/conv_grad/Const_1"
  input: "optimizer/gradients/conv2_1/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv2_1/conv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv2_1/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv2_1/conv_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer/gradients/conv2_1/conv_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv2_1/conv_grad/Conv2DBackpropInput"
  input: "^optimizer/gradients/conv2_1/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv2_1/conv_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv2_1/conv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv2_1/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv2_1/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv2_1/conv_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "optimizer/gradients/pool1/pool1_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "conv1_2/relu"
  input: "pool1/pool1"
  input: "optimizer/gradients/conv2_1/conv_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv1_2/relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/pool1/pool1_grad/MaxPoolGrad"
  input: "conv1_2/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/conv1_2/bias_add_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/conv1_2/relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/conv1_2/bias_add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv1_2/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv1_2/relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/conv1_2/bias_add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv1_2/relu_grad/ReluGrad"
  input: "^optimizer/gradients/conv1_2/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv1_2/relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv1_2/bias_add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv1_2/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv1_2/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv1_2/bias_add_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv1_2/conv_grad/ShapeN"
  op: "ShapeN"
  input: "conv1_1/relu"
  input: "conv1_2/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/conv1_2/conv_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: " \000\000\000 \000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv1_2/conv_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv1_2/conv_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer/gradients/conv1_2/conv_grad/Const"
  input: "conv1_2/weights/read"
  input: "optimizer/gradients/conv1_2/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv1_2/conv_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "conv1_1/relu"
  input: "optimizer/gradients/conv1_2/conv_grad/Const_1"
  input: "optimizer/gradients/conv1_2/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv1_2/conv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv1_2/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv1_2/conv_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer/gradients/conv1_2/conv_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv1_2/conv_grad/Conv2DBackpropInput"
  input: "^optimizer/gradients/conv1_2/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv1_2/conv_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv1_2/conv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv1_2/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv1_2/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv1_2/conv_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv1_1/relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "optimizer/gradients/conv1_2/conv_grad/tuple/control_dependency"
  input: "conv1_1/relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "optimizer/gradients/conv1_1/bias_add_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "optimizer/gradients/conv1_1/relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "optimizer/gradients/conv1_1/bias_add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv1_1/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv1_1/relu_grad/ReluGrad"
}
node {
  name: "optimizer/gradients/conv1_1/bias_add_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv1_1/relu_grad/ReluGrad"
  input: "^optimizer/gradients/conv1_1/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv1_1/relu_grad/ReluGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv1_1/bias_add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv1_1/bias_add_grad/BiasAddGrad"
  input: "^optimizer/gradients/conv1_1/bias_add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv1_1/bias_add_grad/BiasAddGrad"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv1_1/conv_grad/ShapeN"
  op: "ShapeN"
  input: "x"
  input: "conv1_1/weights/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "optimizer/gradients/conv1_1/conv_grad/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: " \000\000\000 \000\000\000 \000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv1_1/conv_grad/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv1_1/conv_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "optimizer/gradients/conv1_1/conv_grad/Const"
  input: "conv1_1/weights/read"
  input: "optimizer/gradients/conv1_1/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv1_1/conv_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "x"
  input: "optimizer/gradients/conv1_1/conv_grad/Const_1"
  input: "optimizer/gradients/conv1_1/bias_add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "optimizer/gradients/conv1_1/conv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^optimizer/gradients/conv1_1/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv1_1/conv_grad/Conv2DBackpropInput"
}
node {
  name: "optimizer/gradients/conv1_1/conv_grad/tuple/control_dependency"
  op: "Identity"
  input: "optimizer/gradients/conv1_1/conv_grad/Conv2DBackpropInput"
  input: "^optimizer/gradients/conv1_1/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv1_1/conv_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "optimizer/gradients/conv1_1/conv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "optimizer/gradients/conv1_1/conv_grad/Conv2DBackpropFilter"
  input: "^optimizer/gradients/conv1_1/conv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@optimizer/gradients/conv1_1/conv_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "optimizer/GradientDescent/learning_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.009999999776482582
      }
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv1_1/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv1_1/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv1_1/conv_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv1_1/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv1_1/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv1_1/bias_add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv1_2/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv1_2/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv1_2/conv_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv1_2/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv1_2/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv1_2/bias_add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv1_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv2_1/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv2_1/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv2_1/conv_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv2_1/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv2_1/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv2_1/bias_add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv2_2/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv2_2/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv2_2/conv_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv2_2/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv2_2/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv2_2/bias_add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv2_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv3_1/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv3_1/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv3_1/conv_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv3_1/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv3_1/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv3_1/bias_add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv3_2/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv3_2/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv3_2/conv_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv3_2/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv3_2/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv3_2/bias_add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv3_3/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv3_3/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv3_3/conv_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv3_3/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv3_3/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv3_3/bias_add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv3_3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv4_1/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv4_1/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv4_1/conv_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv4_1/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv4_1/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv4_1/bias_add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv4_2/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv4_2/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv4_2/conv_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv4_2/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv4_2/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv4_2/bias_add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv4_3/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv4_3/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv4_3/conv_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv4_3/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv4_3/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv4_3/bias_add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv4_3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv5_1/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv5_1/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv5_1/conv_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv5_1/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv5_1/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv5_1/bias_add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_1/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv5_2/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv5_2/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv5_2/conv_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv5_2/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv5_2/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv5_2/bias_add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_2/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv5_3/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv5_3/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv5_3/conv_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_conv5_3/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "conv5_3/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/conv5_3/bias_add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@conv5_3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_fc6/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "fc6/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/fc6/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_fc6/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "fc6/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/fc6/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc6/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_batch_normalization/gamma/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "batch_normalization/gamma"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_batch_normalization/beta/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "batch_normalization/beta"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/batch_norm1/batch_normalization/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_fc7/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "fc7/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/fc7/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_fc7/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "fc7/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/fc7/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc7/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_batch_normalization_1/gamma/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "batch_normalization_1/gamma"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_batch_normalization_1/beta/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "batch_normalization_1/beta"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/batch_norm2/batch_normalization/batchnorm/sub_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@batch_normalization_1/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_fc8/weights/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "fc8/weights"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/fc8/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update_fc8/biases/ApplyGradientDescent"
  op: "ApplyGradientDescent"
  input: "fc8/biases"
  input: "optimizer/GradientDescent/learning_rate"
  input: "optimizer/gradients/fc8/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fc8/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "optimizer/GradientDescent/update"
  op: "NoOp"
  input: "^optimizer/GradientDescent/update_batch_normalization/beta/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_batch_normalization/gamma/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_batch_normalization_1/beta/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_batch_normalization_1/gamma/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv1_1/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv1_1/weights/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv1_2/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv1_2/weights/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv2_1/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv2_1/weights/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv2_2/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv2_2/weights/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv3_1/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv3_1/weights/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv3_2/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv3_2/weights/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv3_3/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv3_3/weights/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv4_1/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv4_1/weights/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv4_2/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv4_2/weights/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv4_3/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv4_3/weights/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv5_1/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv5_1/weights/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv5_2/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv5_2/weights/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv5_3/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_conv5_3/weights/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_fc6/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_fc6/weights/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_fc7/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_fc7/weights/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_fc8/biases/ApplyGradientDescent"
  input: "^optimizer/GradientDescent/update_fc8/weights/ApplyGradientDescent"
}
node {
  name: "optimizer/GradientDescent/value"
  op: "Const"
  input: "^optimizer/GradientDescent/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step/global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "optimizer/GradientDescent"
  op: "AssignAdd"
  input: "global_step/global_step"
  input: "optimizer/GradientDescent/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step/global_step"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^batch_normalization/beta/Assign"
  input: "^batch_normalization/gamma/Assign"
  input: "^batch_normalization/moving_mean/Assign"
  input: "^batch_normalization/moving_variance/Assign"
  input: "^batch_normalization_1/beta/Assign"
  input: "^batch_normalization_1/gamma/Assign"
  input: "^batch_normalization_1/moving_mean/Assign"
  input: "^batch_normalization_1/moving_variance/Assign"
  input: "^conv1_1/biases/Assign"
  input: "^conv1_1/weights/Assign"
  input: "^conv1_2/biases/Assign"
  input: "^conv1_2/weights/Assign"
  input: "^conv2_1/biases/Assign"
  input: "^conv2_1/weights/Assign"
  input: "^conv2_2/biases/Assign"
  input: "^conv2_2/weights/Assign"
  input: "^conv3_1/biases/Assign"
  input: "^conv3_1/weights/Assign"
  input: "^conv3_2/biases/Assign"
  input: "^conv3_2/weights/Assign"
  input: "^conv3_3/biases/Assign"
  input: "^conv3_3/weights/Assign"
  input: "^conv4_1/biases/Assign"
  input: "^conv4_1/weights/Assign"
  input: "^conv4_2/biases/Assign"
  input: "^conv4_2/weights/Assign"
  input: "^conv4_3/biases/Assign"
  input: "^conv4_3/weights/Assign"
  input: "^conv5_1/biases/Assign"
  input: "^conv5_1/weights/Assign"
  input: "^conv5_2/biases/Assign"
  input: "^conv5_2/weights/Assign"
  input: "^conv5_3/biases/Assign"
  input: "^conv5_3/weights/Assign"
  input: "^cur_epoch/cur_epoch/Assign"
  input: "^fc6/biases/Assign"
  input: "^fc6/weights/Assign"
  input: "^fc7/biases/Assign"
  input: "^fc7/weights/Assign"
  input: "^fc8/biases/Assign"
  input: "^fc8/weights/Assign"
  input: "^global_step/global_step/Assign"
}
versions {
  producer: 26
}
