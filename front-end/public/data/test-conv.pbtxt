node {
  name: "convolutional___conv___/x___input___"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 784
        }
      }
    }
  }
}
node {
  name: "convolutional___conv___/Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "convolutional___conv___/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\377\377\377\377\034\000\000\000\034\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Reshape"
  op: "Reshape"
  input: "convolutional___conv___/x___input___"
  input: "convolutional___conv___/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000\001\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1
      }
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "convolutional___conv___/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal/mul"
  op: "Mul"
  input: "convolutional___conv___/truncated_normal/TruncatedNormal"
  input: "convolutional___conv___/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal"
  op: "Add"
  input: "convolutional___conv___/truncated_normal/mul"
  input: "convolutional___conv___/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable"
  input: "convolutional___conv___/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable/read"
  op: "Identity"
  input: "convolutional___conv___/Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
}
node {
  name: "convolutional___conv___/W_conv1/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "convolutional___conv___/W_conv1"
      }
    }
  }
}
node {
  name: "convolutional___conv___/W_conv1"
  op: "HistogramSummary"
  input: "convolutional___conv___/W_conv1/tag"
  input: "convolutional___conv___/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.1
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_1/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_1"
  input: "convolutional___conv___/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_1/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_1"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Conv2D"
  op: "Conv2D"
  input: "convolutional___conv___/Reshape"
  input: "convolutional___conv___/Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/add"
  op: "Add"
  input: "convolutional___conv___/Conv2D"
  input: "convolutional___conv___/Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/Relu"
  op: "Relu"
  input: "convolutional___conv___/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/MaxPool"
  op: "MaxPool"
  input: "convolutional___conv___/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_1/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_1/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1
      }
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_1/TruncatedNormal"
  op: "TruncatedNormal"
  input: "convolutional___conv___/truncated_normal_1/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_1/mul"
  op: "Mul"
  input: "convolutional___conv___/truncated_normal_1/TruncatedNormal"
  input: "convolutional___conv___/truncated_normal_1/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_1"
  op: "Add"
  input: "convolutional___conv___/truncated_normal_1/mul"
  input: "convolutional___conv___/truncated_normal_1/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_2/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_2"
  input: "convolutional___conv___/truncated_normal_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_2/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_2"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.1
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_3/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_3"
  input: "convolutional___conv___/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_3/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_3"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Conv2D_1"
  op: "Conv2D"
  input: "convolutional___conv___/MaxPool"
  input: "convolutional___conv___/Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/add_1"
  op: "Add"
  input: "convolutional___conv___/Conv2D_1"
  input: "convolutional___conv___/Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/Relu_1"
  op: "Relu"
  input: "convolutional___conv___/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/MaxPool_1"
  op: "MaxPool"
  input: "convolutional___conv___/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\014\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_2/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_2/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1
      }
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_2/TruncatedNormal"
  op: "TruncatedNormal"
  input: "convolutional___conv___/truncated_normal_2/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_2/mul"
  op: "Mul"
  input: "convolutional___conv___/truncated_normal_2/TruncatedNormal"
  input: "convolutional___conv___/truncated_normal_2/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_2"
  op: "Add"
  input: "convolutional___conv___/truncated_normal_2/mul"
  input: "convolutional___conv___/truncated_normal_2/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3136
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_4/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_4"
  input: "convolutional___conv___/truncated_normal_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_4/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_4"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 1024
          }
        }
        float_val: 0.1
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_5"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_5/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_5"
  input: "convolutional___conv___/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_5/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_5"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377@\014\000\000"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Reshape_1"
  op: "Reshape"
  input: "convolutional___conv___/MaxPool_1"
  input: "convolutional___conv___/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "convolutional___conv___/MatMul"
  op: "MatMul"
  input: "convolutional___conv___/Reshape_1"
  input: "convolutional___conv___/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "convolutional___conv___/add_2"
  op: "Add"
  input: "convolutional___conv___/MatMul"
  input: "convolutional___conv___/Variable_5/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/Relu_2"
  op: "Relu"
  input: "convolutional___conv___/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/sub"
  op: "Sub"
  input: "convolutional___conv___/sub/x"
  input: "convolutional___conv___/Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/dropout/Shape"
  op: "Shape"
  input: "convolutional___conv___/Relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "convolutional___conv___/dropout/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/dropout/sub"
  op: "Sub"
  input: "convolutional___conv___/dropout/sub/x"
  input: "convolutional___conv___/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "convolutional___conv___/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "convolutional___conv___/dropout/random_uniform/sub"
  op: "Sub"
  input: "convolutional___conv___/dropout/random_uniform/max"
  input: "convolutional___conv___/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/dropout/random_uniform/mul"
  op: "Mul"
  input: "convolutional___conv___/dropout/random_uniform/RandomUniform"
  input: "convolutional___conv___/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/dropout/random_uniform"
  op: "Add"
  input: "convolutional___conv___/dropout/random_uniform/mul"
  input: "convolutional___conv___/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/dropout/add"
  op: "Add"
  input: "convolutional___conv___/dropout/sub"
  input: "convolutional___conv___/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/dropout/Floor"
  op: "Floor"
  input: "convolutional___conv___/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/dropout/truediv"
  op: "RealDiv"
  input: "convolutional___conv___/Relu_2"
  input: "convolutional___conv___/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/dropout/mul"
  op: "Mul"
  input: "convolutional___conv___/dropout/truediv"
  input: "convolutional___conv___/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_3/mean"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_3/stddev"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1
      }
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_3/TruncatedNormal"
  op: "TruncatedNormal"
  input: "convolutional___conv___/truncated_normal_3/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_3/mul"
  op: "Mul"
  input: "convolutional___conv___/truncated_normal_3/TruncatedNormal"
  input: "convolutional___conv___/truncated_normal_3/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/truncated_normal_3"
  op: "Add"
  input: "convolutional___conv___/truncated_normal_3/mul"
  input: "convolutional___conv___/truncated_normal_3/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/Variable_6"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_6/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_6"
  input: "convolutional___conv___/truncated_normal_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_6/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_6"
      }
    }
  }
}
node {
  name: "convolutional___conv___/W_fc2/tag"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "convolutional___conv___/W_fc2"
      }
    }
  }
}
node {
  name: "convolutional___conv___/W_fc2"
  op: "HistogramSummary"
  input: "convolutional___conv___/W_fc2/tag"
  input: "convolutional___conv___/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.1
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_7"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_7/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_7"
  input: "convolutional___conv___/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_7/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_7"
      }
    }
  }
}
node {
  name: "convolutional___conv___/MatMul_1"
  op: "MatMul"
  input: "convolutional___conv___/dropout/mul"
  input: "convolutional___conv___/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "convolutional___conv___/add_3"
  op: "Add"
  input: "convolutional___conv___/MatMul_1"
  input: "convolutional___conv___/Variable_7/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "convolutional___conv___/y___output___"
  op: "Softmax"
  input: "convolutional___conv___/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "y"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 10
        }
      }
    }
  }
}
node {
  name: "cross_entropy/Log"
  op: "Log"
  input: "convolutional___conv___/y___output___"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cross_entropy/mul"
  op: "Mul"
  input: "y"
  input: "cross_entropy/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "cross_entropy/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "cross_entropy/Sum"
  op: "Sum"
  input: "cross_entropy/mul"
  input: "cross_entropy/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "cross_entropy/Neg"
  op: "Neg"
  input: "cross_entropy/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cross_entropy/Neg_grad/Neg"
  op: "Neg"
  input: "gradients/Fill"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/cross_entropy/Sum_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/cross_entropy/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/cross_entropy/Neg_grad/Neg"
  input: "gradients/cross_entropy/Sum_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cross_entropy/Sum_grad/Shape"
  op: "Shape"
  input: "cross_entropy/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cross_entropy/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/cross_entropy/Sum_grad/Reshape"
  input: "gradients/cross_entropy/Sum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cross_entropy/mul_grad/Shape"
  op: "Shape"
  input: "y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cross_entropy/mul_grad/Shape_1"
  op: "Shape"
  input: "cross_entropy/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cross_entropy/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/cross_entropy/mul_grad/Shape"
  input: "gradients/cross_entropy/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cross_entropy/mul_grad/Mul"
  op: "Mul"
  input: "gradients/cross_entropy/Sum_grad/Tile"
  input: "cross_entropy/Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/cross_entropy/mul_grad/Sum"
  op: "Sum"
  input: "gradients/cross_entropy/mul_grad/Mul"
  input: "gradients/cross_entropy/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cross_entropy/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/cross_entropy/mul_grad/Sum"
  input: "gradients/cross_entropy/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cross_entropy/mul_grad/Mul_1"
  op: "Mul"
  input: "y"
  input: "gradients/cross_entropy/Sum_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/cross_entropy/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/cross_entropy/mul_grad/Mul_1"
  input: "gradients/cross_entropy/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/cross_entropy/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/cross_entropy/mul_grad/Sum_1"
  input: "gradients/cross_entropy/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/cross_entropy/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/cross_entropy/mul_grad/Reshape"
  input: "^gradients/cross_entropy/mul_grad/Reshape_1"
}
node {
  name: "gradients/cross_entropy/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/cross_entropy/mul_grad/Reshape"
  input: "^gradients/cross_entropy/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cross_entropy/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/cross_entropy/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/cross_entropy/mul_grad/Reshape_1"
  input: "^gradients/cross_entropy/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/cross_entropy/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/cross_entropy/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "convolutional___conv___/y___output___"
  input: "^gradients/cross_entropy/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/cross_entropy/Log_grad/mul"
  op: "Mul"
  input: "gradients/cross_entropy/mul_grad/tuple/control_dependency_1"
  input: "gradients/cross_entropy/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/convolutional___conv___/y___output____grad/mul"
  op: "Mul"
  input: "gradients/cross_entropy/Log_grad/mul"
  input: "convolutional___conv___/y___output___"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/convolutional___conv___/y___output____grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/y___output____grad/Sum"
  op: "Sum"
  input: "gradients/convolutional___conv___/y___output____grad/mul"
  input: "gradients/convolutional___conv___/y___output____grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/convolutional___conv___/y___output____grad/sub"
  op: "Sub"
  input: "gradients/cross_entropy/Log_grad/mul"
  input: "gradients/convolutional___conv___/y___output____grad/Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/convolutional___conv___/y___output____grad/mul_1"
  op: "Mul"
  input: "gradients/convolutional___conv___/y___output____grad/sub"
  input: "convolutional___conv___/y___output___"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_3_grad/Shape"
  op: "Shape"
  input: "convolutional___conv___/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_3_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 10
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/convolutional___conv___/add_3_grad/Shape"
  input: "gradients/convolutional___conv___/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_3_grad/Sum"
  op: "Sum"
  input: "gradients/convolutional___conv___/y___output____grad/mul_1"
  input: "gradients/convolutional___conv___/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/convolutional___conv___/add_3_grad/Sum"
  input: "gradients/convolutional___conv___/add_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/convolutional___conv___/y___output____grad/mul_1"
  input: "gradients/convolutional___conv___/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/convolutional___conv___/add_3_grad/Sum_1"
  input: "gradients/convolutional___conv___/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/convolutional___conv___/add_3_grad/Reshape"
  input: "^gradients/convolutional___conv___/add_3_grad/Reshape_1"
}
node {
  name: "gradients/convolutional___conv___/add_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/convolutional___conv___/add_3_grad/Reshape"
  input: "^gradients/convolutional___conv___/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/add_3_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/convolutional___conv___/add_3_grad/Reshape_1"
  input: "^gradients/convolutional___conv___/add_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/add_3_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "gradients/convolutional___conv___/add_3_grad/tuple/control_dependency"
  input: "convolutional___conv___/Variable_6/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/convolutional___conv___/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "convolutional___conv___/dropout/mul"
  input: "gradients/convolutional___conv___/add_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/convolutional___conv___/MatMul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/convolutional___conv___/MatMul_1_grad/MatMul"
  input: "^gradients/convolutional___conv___/MatMul_1_grad/MatMul_1"
}
node {
  name: "gradients/convolutional___conv___/MatMul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/convolutional___conv___/MatMul_1_grad/MatMul"
  input: "^gradients/convolutional___conv___/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/MatMul_1_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/MatMul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/convolutional___conv___/MatMul_1_grad/MatMul_1"
  input: "^gradients/convolutional___conv___/MatMul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/MatMul_1_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/mul_grad/Shape"
  op: "Shape"
  input: "convolutional___conv___/dropout/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/mul_grad/Shape_1"
  op: "Shape"
  input: "convolutional___conv___/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/convolutional___conv___/dropout/mul_grad/Shape"
  input: "gradients/convolutional___conv___/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/mul_grad/Mul"
  op: "Mul"
  input: "gradients/convolutional___conv___/MatMul_1_grad/tuple/control_dependency"
  input: "convolutional___conv___/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/mul_grad/Sum"
  op: "Sum"
  input: "gradients/convolutional___conv___/dropout/mul_grad/Mul"
  input: "gradients/convolutional___conv___/dropout/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/convolutional___conv___/dropout/mul_grad/Sum"
  input: "gradients/convolutional___conv___/dropout/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/mul_grad/Mul_1"
  op: "Mul"
  input: "convolutional___conv___/dropout/truediv"
  input: "gradients/convolutional___conv___/MatMul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/convolutional___conv___/dropout/mul_grad/Mul_1"
  input: "gradients/convolutional___conv___/dropout/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/convolutional___conv___/dropout/mul_grad/Sum_1"
  input: "gradients/convolutional___conv___/dropout/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/convolutional___conv___/dropout/mul_grad/Reshape"
  input: "^gradients/convolutional___conv___/dropout/mul_grad/Reshape_1"
}
node {
  name: "gradients/convolutional___conv___/dropout/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/convolutional___conv___/dropout/mul_grad/Reshape"
  input: "^gradients/convolutional___conv___/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/dropout/mul_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/convolutional___conv___/dropout/mul_grad/Reshape_1"
  input: "^gradients/convolutional___conv___/dropout/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/dropout/mul_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/truediv_grad/Shape"
  op: "Shape"
  input: "convolutional___conv___/Relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/truediv_grad/Shape_1"
  op: "Shape"
  input: "convolutional___conv___/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/Shape"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/convolutional___conv___/dropout/mul_grad/tuple/control_dependency"
  input: "convolutional___conv___/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/RealDiv"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/Sum"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/truediv_grad/Neg"
  op: "Neg"
  input: "convolutional___conv___/Relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/Neg"
  input: "convolutional___conv___/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/RealDiv_1"
  input: "convolutional___conv___/dropout/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/truediv_grad/mul"
  op: "Mul"
  input: "gradients/convolutional___conv___/dropout/mul_grad/tuple/control_dependency"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/mul"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/Sum_1"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/truediv_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/convolutional___conv___/dropout/truediv_grad/Reshape"
  input: "^gradients/convolutional___conv___/dropout/truediv_grad/Reshape_1"
}
node {
  name: "gradients/convolutional___conv___/dropout/truediv_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/Reshape"
  input: "^gradients/convolutional___conv___/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/dropout/truediv_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/dropout/truediv_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/Reshape_1"
  input: "^gradients/convolutional___conv___/dropout/truediv_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/dropout/truediv_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/Relu_2_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/convolutional___conv___/dropout/truediv_grad/tuple/control_dependency"
  input: "convolutional___conv___/Relu_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_2_grad/Shape"
  op: "Shape"
  input: "convolutional___conv___/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_2_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/convolutional___conv___/add_2_grad/Shape"
  input: "gradients/convolutional___conv___/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_2_grad/Sum"
  op: "Sum"
  input: "gradients/convolutional___conv___/Relu_2_grad/ReluGrad"
  input: "gradients/convolutional___conv___/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/convolutional___conv___/add_2_grad/Sum"
  input: "gradients/convolutional___conv___/add_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/convolutional___conv___/Relu_2_grad/ReluGrad"
  input: "gradients/convolutional___conv___/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/convolutional___conv___/add_2_grad/Sum_1"
  input: "gradients/convolutional___conv___/add_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/convolutional___conv___/add_2_grad/Reshape"
  input: "^gradients/convolutional___conv___/add_2_grad/Reshape_1"
}
node {
  name: "gradients/convolutional___conv___/add_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/convolutional___conv___/add_2_grad/Reshape"
  input: "^gradients/convolutional___conv___/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/add_2_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/convolutional___conv___/add_2_grad/Reshape_1"
  input: "^gradients/convolutional___conv___/add_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/add_2_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/convolutional___conv___/add_2_grad/tuple/control_dependency"
  input: "convolutional___conv___/Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/convolutional___conv___/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "convolutional___conv___/Reshape_1"
  input: "gradients/convolutional___conv___/add_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/convolutional___conv___/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/convolutional___conv___/MatMul_grad/MatMul"
  input: "^gradients/convolutional___conv___/MatMul_grad/MatMul_1"
}
node {
  name: "gradients/convolutional___conv___/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/convolutional___conv___/MatMul_grad/MatMul"
  input: "^gradients/convolutional___conv___/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/MatMul_grad/MatMul"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/convolutional___conv___/MatMul_grad/MatMul_1"
  input: "^gradients/convolutional___conv___/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/MatMul_grad/MatMul_1"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/Reshape_1_grad/Shape"
  op: "Shape"
  input: "convolutional___conv___/MaxPool_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/convolutional___conv___/MatMul_grad/tuple/control_dependency"
  input: "gradients/convolutional___conv___/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/MaxPool_1_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "convolutional___conv___/Relu_1"
  input: "convolutional___conv___/MaxPool_1"
  input: "gradients/convolutional___conv___/Reshape_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/Relu_1_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/convolutional___conv___/MaxPool_1_grad/MaxPoolGrad"
  input: "convolutional___conv___/Relu_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_1_grad/Shape"
  op: "Shape"
  input: "convolutional___conv___/Conv2D_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/convolutional___conv___/add_1_grad/Shape"
  input: "gradients/convolutional___conv___/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/convolutional___conv___/Relu_1_grad/ReluGrad"
  input: "gradients/convolutional___conv___/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/convolutional___conv___/add_1_grad/Sum"
  input: "gradients/convolutional___conv___/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/convolutional___conv___/Relu_1_grad/ReluGrad"
  input: "gradients/convolutional___conv___/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/convolutional___conv___/add_1_grad/Sum_1"
  input: "gradients/convolutional___conv___/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/convolutional___conv___/add_1_grad/Reshape"
  input: "^gradients/convolutional___conv___/add_1_grad/Reshape_1"
}
node {
  name: "gradients/convolutional___conv___/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/convolutional___conv___/add_1_grad/Reshape"
  input: "^gradients/convolutional___conv___/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/add_1_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/convolutional___conv___/add_1_grad/Reshape_1"
  input: "^gradients/convolutional___conv___/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/add_1_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/Conv2D_1_grad/ShapeN"
  op: "ShapeN"
  input: "convolutional___conv___/MaxPool"
  input: "convolutional___conv___/Variable_2/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/Conv2D_1_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/convolutional___conv___/Conv2D_1_grad/ShapeN"
  input: "convolutional___conv___/Variable_2/read"
  input: "gradients/convolutional___conv___/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/convolutional___conv___/Conv2D_1_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "convolutional___conv___/MaxPool"
  input: "gradients/convolutional___conv___/Conv2D_1_grad/ShapeN:1"
  input: "gradients/convolutional___conv___/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/convolutional___conv___/Conv2D_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/convolutional___conv___/Conv2D_1_grad/Conv2DBackpropFilter"
  input: "^gradients/convolutional___conv___/Conv2D_1_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/convolutional___conv___/Conv2D_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/convolutional___conv___/Conv2D_1_grad/Conv2DBackpropInput"
  input: "^gradients/convolutional___conv___/Conv2D_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/Conv2D_1_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/Conv2D_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/convolutional___conv___/Conv2D_1_grad/Conv2DBackpropFilter"
  input: "^gradients/convolutional___conv___/Conv2D_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/Conv2D_1_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/MaxPool_grad/MaxPoolGrad"
  op: "MaxPoolGrad"
  input: "convolutional___conv___/Relu"
  input: "convolutional___conv___/MaxPool"
  input: "gradients/convolutional___conv___/Conv2D_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "ksize"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/convolutional___conv___/MaxPool_grad/MaxPoolGrad"
  input: "convolutional___conv___/Relu"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_grad/Shape"
  op: "Shape"
  input: "convolutional___conv___/Conv2D"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_grad/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/convolutional___conv___/add_grad/Shape"
  input: "gradients/convolutional___conv___/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_grad/Sum"
  op: "Sum"
  input: "gradients/convolutional___conv___/Relu_grad/ReluGrad"
  input: "gradients/convolutional___conv___/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/convolutional___conv___/add_grad/Sum"
  input: "gradients/convolutional___conv___/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/convolutional___conv___/Relu_grad/ReluGrad"
  input: "gradients/convolutional___conv___/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/convolutional___conv___/add_grad/Sum_1"
  input: "gradients/convolutional___conv___/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/convolutional___conv___/add_grad/Reshape"
  input: "^gradients/convolutional___conv___/add_grad/Reshape_1"
}
node {
  name: "gradients/convolutional___conv___/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/convolutional___conv___/add_grad/Reshape"
  input: "^gradients/convolutional___conv___/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/add_grad/Reshape"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/convolutional___conv___/add_grad/Reshape_1"
  input: "^gradients/convolutional___conv___/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/add_grad/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/Conv2D_grad/ShapeN"
  op: "ShapeN"
  input: "convolutional___conv___/Reshape"
  input: "convolutional___conv___/Variable/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/convolutional___conv___/Conv2D_grad/Conv2DBackpropInput"
  op: "Conv2DBackpropInput"
  input: "gradients/convolutional___conv___/Conv2D_grad/ShapeN"
  input: "convolutional___conv___/Variable/read"
  input: "gradients/convolutional___conv___/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/convolutional___conv___/Conv2D_grad/Conv2DBackpropFilter"
  op: "Conv2DBackpropFilter"
  input: "convolutional___conv___/Reshape"
  input: "gradients/convolutional___conv___/Conv2D_grad/ShapeN:1"
  input: "gradients/convolutional___conv___/add_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/convolutional___conv___/Conv2D_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/convolutional___conv___/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/convolutional___conv___/Conv2D_grad/Conv2DBackpropInput"
}
node {
  name: "gradients/convolutional___conv___/Conv2D_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/convolutional___conv___/Conv2D_grad/Conv2DBackpropInput"
  input: "^gradients/convolutional___conv___/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/Conv2D_grad/Conv2DBackpropInput"
      }
    }
  }
}
node {
  name: "gradients/convolutional___conv___/Conv2D_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/convolutional___conv___/Conv2D_grad/Conv2DBackpropFilter"
  input: "^gradients/convolutional___conv___/Conv2D_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/convolutional___conv___/Conv2D_grad/Conv2DBackpropFilter"
      }
    }
  }
}
node {
  name: "beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.89999998
      }
    }
  }
}
node {
  name: "beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta1_power/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta1_power/read"
  op: "Identity"
  input: "beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
}
node {
  name: "beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.99900001
      }
    }
  }
}
node {
  name: "beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "beta2_power/Assign"
  op: "Assign"
  input: "beta2_power"
  input: "beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "beta2_power/read"
  op: "Identity"
  input: "beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable/Adam/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable/Adam"
  input: "convolutional___conv___/Variable/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable/Adam/read"
  op: "Identity"
  input: "convolutional___conv___/Variable/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 5
          }
          dim {
            size: 5
          }
          dim {
            size: 1
          }
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 1
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable/Adam_1/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable/Adam_1"
  input: "convolutional___conv___/Variable/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable/Adam_1/read"
  op: "Identity"
  input: "convolutional___conv___/Variable/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_1/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_1/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_1/Adam/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_1/Adam"
  input: "convolutional___conv___/Variable_1/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_1/Adam/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_1/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_1"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_1/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 32
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_1/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_1"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_1/Adam_1/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_1/Adam_1"
  input: "convolutional___conv___/Variable_1/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_1/Adam_1/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_1/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_1"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_2/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_2/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_2/Adam/Initializer/zeros"
  op: "Fill"
  input: "convolutional___conv___/Variable_2/Adam/Initializer/zeros/shape_as_tensor"
  input: "convolutional___conv___/Variable_2/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "convolutional___conv___/Variable_2/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_2/Adam/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_2/Adam"
  input: "convolutional___conv___/Variable_2/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_2/Adam/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_2/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_2"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_2/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\005\000\000\000\005\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_2/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_2/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "convolutional___conv___/Variable_2/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "convolutional___conv___/Variable_2/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_2"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "convolutional___conv___/Variable_2/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_2"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 5
        }
        dim {
          size: 5
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_2/Adam_1/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_2/Adam_1"
  input: "convolutional___conv___/Variable_2/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_2/Adam_1/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_2/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_2"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_3/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_3/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_3"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_3/Adam/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_3/Adam"
  input: "convolutional___conv___/Variable_3/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_3/Adam/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_3/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_3"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_3/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_3/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_3"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_3/Adam_1/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_3/Adam_1"
  input: "convolutional___conv___/Variable_3/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_3/Adam_1/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_3/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_3"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_4/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\014\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_4/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_4/Adam/Initializer/zeros"
  op: "Fill"
  input: "convolutional___conv___/Variable_4/Adam/Initializer/zeros/shape_as_tensor"
  input: "convolutional___conv___/Variable_4/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_4"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "convolutional___conv___/Variable_4/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_4"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3136
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_4/Adam/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_4/Adam"
  input: "convolutional___conv___/Variable_4/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_4/Adam/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_4/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_4"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_4/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\014\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_4/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_4/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "convolutional___conv___/Variable_4/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "convolutional___conv___/Variable_4/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_4"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "convolutional___conv___/Variable_4/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_4"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3136
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_4/Adam_1/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_4/Adam_1"
  input: "convolutional___conv___/Variable_4/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_4/Adam_1/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_4/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_4"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_5/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_5/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_5/Adam/Initializer/zeros"
  op: "Fill"
  input: "convolutional___conv___/Variable_5/Adam/Initializer/zeros/shape_as_tensor"
  input: "convolutional___conv___/Variable_5/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_5"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "convolutional___conv___/Variable_5/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_5"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_5/Adam/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_5/Adam"
  input: "convolutional___conv___/Variable_5/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_5/Adam/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_5/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_5"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_5/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_5/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_5/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "convolutional___conv___/Variable_5/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "convolutional___conv___/Variable_5/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_5"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "convolutional___conv___/Variable_5/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_5"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_5/Adam_1/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_5/Adam_1"
  input: "convolutional___conv___/Variable_5/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_5/Adam_1/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_5/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_5"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_6/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_6/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_6/Adam/Initializer/zeros"
  op: "Fill"
  input: "convolutional___conv___/Variable_6/Adam/Initializer/zeros/shape_as_tensor"
  input: "convolutional___conv___/Variable_6/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_6"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "convolutional___conv___/Variable_6/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_6"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_6/Adam/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_6/Adam"
  input: "convolutional___conv___/Variable_6/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_6/Adam/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_6/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_6"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_6/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\n\000\000\000"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_6/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_6/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "convolutional___conv___/Variable_6/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "convolutional___conv___/Variable_6/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_6"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "convolutional___conv___/Variable_6/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_6"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_6/Adam_1/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_6/Adam_1"
  input: "convolutional___conv___/Variable_6/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_6/Adam_1/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_6/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_6"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_7/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_7/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_7"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_7/Adam/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_7/Adam"
  input: "convolutional___conv___/Variable_7/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_7/Adam/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_7/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_7"
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_7/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "convolutional___conv___/Variable_7/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_7"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "convolutional___conv___/Variable_7/Adam_1/Assign"
  op: "Assign"
  input: "convolutional___conv___/Variable_7/Adam_1"
  input: "convolutional___conv___/Variable_7/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "convolutional___conv___/Variable_7/Adam_1/read"
  op: "Identity"
  input: "convolutional___conv___/Variable_7/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_7"
      }
    }
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.9999997e-05
      }
    }
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.89999998
      }
    }
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.99900001
      }
    }
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.9999999e-09
      }
    }
  }
}
node {
  name: "Adam/update_convolutional___conv___/Variable/ApplyAdam"
  op: "ApplyAdam"
  input: "convolutional___conv___/Variable"
  input: "convolutional___conv___/Variable/Adam"
  input: "convolutional___conv___/Variable/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/convolutional___conv___/Conv2D_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_convolutional___conv___/Variable_1/ApplyAdam"
  op: "ApplyAdam"
  input: "convolutional___conv___/Variable_1"
  input: "convolutional___conv___/Variable_1/Adam"
  input: "convolutional___conv___/Variable_1/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/convolutional___conv___/add_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_convolutional___conv___/Variable_2/ApplyAdam"
  op: "ApplyAdam"
  input: "convolutional___conv___/Variable_2"
  input: "convolutional___conv___/Variable_2/Adam"
  input: "convolutional___conv___/Variable_2/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/convolutional___conv___/Conv2D_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_convolutional___conv___/Variable_3/ApplyAdam"
  op: "ApplyAdam"
  input: "convolutional___conv___/Variable_3"
  input: "convolutional___conv___/Variable_3/Adam"
  input: "convolutional___conv___/Variable_3/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/convolutional___conv___/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_convolutional___conv___/Variable_4/ApplyAdam"
  op: "ApplyAdam"
  input: "convolutional___conv___/Variable_4"
  input: "convolutional___conv___/Variable_4/Adam"
  input: "convolutional___conv___/Variable_4/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/convolutional___conv___/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_convolutional___conv___/Variable_5/ApplyAdam"
  op: "ApplyAdam"
  input: "convolutional___conv___/Variable_5"
  input: "convolutional___conv___/Variable_5/Adam"
  input: "convolutional___conv___/Variable_5/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/convolutional___conv___/add_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_5"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_convolutional___conv___/Variable_6/ApplyAdam"
  op: "ApplyAdam"
  input: "convolutional___conv___/Variable_6"
  input: "convolutional___conv___/Variable_6/Adam"
  input: "convolutional___conv___/Variable_6/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/convolutional___conv___/MatMul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_6"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/update_convolutional___conv___/Variable_7/ApplyAdam"
  op: "ApplyAdam"
  input: "convolutional___conv___/Variable_7"
  input: "convolutional___conv___/Variable_7/Adam"
  input: "convolutional___conv___/Variable_7/Adam_1"
  input: "beta1_power/read"
  input: "beta2_power/read"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/convolutional___conv___/add_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable_7"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "beta1_power/read"
  input: "Adam/beta1"
  input: "^Adam/update_convolutional___conv___/Variable/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_1/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_2/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_3/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_4/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_5/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_6/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_7/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
}
node {
  name: "Adam/Assign"
  op: "Assign"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "beta2_power/read"
  input: "Adam/beta2"
  input: "^Adam/update_convolutional___conv___/Variable/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_1/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_2/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_3/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_4/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_5/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_6/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_7/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
}
node {
  name: "Adam/Assign_1"
  op: "Assign"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@convolutional___conv___/Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Adam"
  op: "NoOp"
  input: "^Adam/Assign"
  input: "^Adam/Assign_1"
  input: "^Adam/update_convolutional___conv___/Variable/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_1/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_2/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_3/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_4/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_5/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_6/ApplyAdam"
  input: "^Adam/update_convolutional___conv___/Variable_7/ApplyAdam"
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "convolutional___conv___/y___output___"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax_1"
  op: "ArgMax"
  input: "y"
  input: "ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "ArgMax"
  input: "ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "Cast"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
versions {
  producer: 27
}
