node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 3
          }
        }
        tensor_content: "\037\000\000\0003\000\000\000c\000\000\000\017\000\000\000\005\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bert/embeddings/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bert/embeddings/ExpandDims"
  op: "ExpandDims"
  input: "Const"
  input: "bert/embeddings/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/embeddings/word_embeddings/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/word_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000}\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/embeddings/word_embeddings/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/word_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/embeddings/word_embeddings/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/word_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/embeddings/word_embeddings/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/embeddings/word_embeddings/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/word_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/embeddings/word_embeddings/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/embeddings/word_embeddings/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/embeddings/word_embeddings/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/word_embeddings"
      }
    }
  }
}
node {
  name: "bert/embeddings/word_embeddings/Initializer/truncated_normal"
  op: "Add"
  input: "bert/embeddings/word_embeddings/Initializer/truncated_normal/mul"
  input: "bert/embeddings/word_embeddings/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/word_embeddings"
      }
    }
  }
}
node {
  name: "bert/embeddings/word_embeddings"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/word_embeddings"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32000
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/embeddings/word_embeddings/Assign"
  op: "Assign"
  input: "bert/embeddings/word_embeddings"
  input: "bert/embeddings/word_embeddings/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/word_embeddings"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/embeddings/word_embeddings/read"
  op: "Identity"
  input: "bert/embeddings/word_embeddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/word_embeddings"
      }
    }
  }
}
node {
  name: "bert/embeddings/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bert/embeddings/Reshape"
  op: "Reshape"
  input: "bert/embeddings/ExpandDims"
  input: "bert/embeddings/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/embeddings/GatherV2/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bert/embeddings/GatherV2"
  op: "GatherV2"
  input: "bert/embeddings/word_embeddings/read"
  input: "bert/embeddings/Reshape"
  input: "bert/embeddings/GatherV2/axis"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/embeddings/Reshape_1"
  op: "Reshape"
  input: "bert/embeddings/GatherV2"
  input: "bert/embeddings/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/embeddings/token_type_embeddings/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/token_type_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/embeddings/token_type_embeddings/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/token_type_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/embeddings/token_type_embeddings/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/token_type_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/embeddings/token_type_embeddings/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/embeddings/token_type_embeddings/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/token_type_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/embeddings/token_type_embeddings/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/embeddings/token_type_embeddings/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/embeddings/token_type_embeddings/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/token_type_embeddings"
      }
    }
  }
}
node {
  name: "bert/embeddings/token_type_embeddings/Initializer/truncated_normal"
  op: "Add"
  input: "bert/embeddings/token_type_embeddings/Initializer/truncated_normal/mul"
  input: "bert/embeddings/token_type_embeddings/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/token_type_embeddings"
      }
    }
  }
}
node {
  name: "bert/embeddings/token_type_embeddings"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/token_type_embeddings"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/embeddings/token_type_embeddings/Assign"
  op: "Assign"
  input: "bert/embeddings/token_type_embeddings"
  input: "bert/embeddings/token_type_embeddings/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/token_type_embeddings"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/embeddings/token_type_embeddings/read"
  op: "Identity"
  input: "bert/embeddings/token_type_embeddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/token_type_embeddings"
      }
    }
  }
}
node {
  name: "bert/embeddings/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bert/embeddings/Reshape_2"
  op: "Reshape"
  input: "Const_2"
  input: "bert/embeddings/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/embeddings/one_hot/on_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/embeddings/one_hot/off_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/embeddings/one_hot/depth"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "bert/embeddings/one_hot"
  op: "OneHot"
  input: "bert/embeddings/Reshape_2"
  input: "bert/embeddings/one_hot/depth"
  input: "bert/embeddings/one_hot/on_value"
  input: "bert/embeddings/one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "bert/embeddings/MatMul"
  op: "MatMul"
  input: "bert/embeddings/one_hot"
  input: "bert/embeddings/token_type_embeddings/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/embeddings/Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/embeddings/Reshape_3"
  op: "Reshape"
  input: "bert/embeddings/MatMul"
  input: "bert/embeddings/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/embeddings/add"
  op: "Add"
  input: "bert/embeddings/Reshape_1"
  input: "bert/embeddings/Reshape_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/assert_less_equal/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "bert/embeddings/assert_less_equal/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 512
      }
    }
  }
}
node {
  name: "bert/embeddings/assert_less_equal/LessEqual"
  op: "LessEqual"
  input: "bert/embeddings/assert_less_equal/x"
  input: "bert/embeddings/assert_less_equal/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/embeddings/assert_less_equal/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "bert/embeddings/assert_less_equal/All"
  op: "All"
  input: "bert/embeddings/assert_less_equal/LessEqual"
  input: "bert/embeddings/assert_less_equal/Const"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "bert/embeddings/assert_less_equal/Assert/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "bert/embeddings/assert_less_equal/Assert/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (bert/embeddings/assert_less_equal/x:0) = "
      }
    }
  }
}
node {
  name: "bert/embeddings/assert_less_equal/Assert/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (bert/embeddings/assert_less_equal/y:0) = "
      }
    }
  }
}
node {
  name: "bert/embeddings/assert_less_equal/Assert/Assert/data_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "bert/embeddings/assert_less_equal/Assert/Assert/data_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "Condition x <= y did not hold element-wise:x (bert/embeddings/assert_less_equal/x:0) = "
      }
    }
  }
}
node {
  name: "bert/embeddings/assert_less_equal/Assert/Assert/data_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "y (bert/embeddings/assert_less_equal/y:0) = "
      }
    }
  }
}
node {
  name: "bert/embeddings/assert_less_equal/Assert/Assert"
  op: "Assert"
  input: "bert/embeddings/assert_less_equal/All"
  input: "bert/embeddings/assert_less_equal/Assert/Assert/data_0"
  input: "bert/embeddings/assert_less_equal/Assert/Assert/data_1"
  input: "bert/embeddings/assert_less_equal/x"
  input: "bert/embeddings/assert_less_equal/Assert/Assert/data_3"
  input: "bert/embeddings/assert_less_equal/y"
  attr {
    key: "T"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT32
        type: DT_STRING
        type: DT_INT32
      }
    }
  }
  attr {
    key: "summarize"
    value {
      i: 3
    }
  }
}
node {
  name: "bert/embeddings/position_embeddings/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/position_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/embeddings/position_embeddings/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/position_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/embeddings/position_embeddings/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/position_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/embeddings/position_embeddings/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/embeddings/position_embeddings/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/position_embeddings"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/embeddings/position_embeddings/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/embeddings/position_embeddings/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/embeddings/position_embeddings/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/position_embeddings"
      }
    }
  }
}
node {
  name: "bert/embeddings/position_embeddings/Initializer/truncated_normal"
  op: "Add"
  input: "bert/embeddings/position_embeddings/Initializer/truncated_normal/mul"
  input: "bert/embeddings/position_embeddings/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/position_embeddings"
      }
    }
  }
}
node {
  name: "bert/embeddings/position_embeddings"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/position_embeddings"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 512
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/embeddings/position_embeddings/Assign"
  op: "Assign"
  input: "bert/embeddings/position_embeddings"
  input: "bert/embeddings/position_embeddings/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/position_embeddings"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/embeddings/position_embeddings/read"
  op: "Identity"
  input: "bert/embeddings/position_embeddings"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/position_embeddings"
      }
    }
  }
}
node {
  name: "bert/embeddings/Slice/begin"
  op: "Const"
  input: "^bert/embeddings/assert_less_equal/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bert/embeddings/Slice/size"
  op: "Const"
  input: "^bert/embeddings/assert_less_equal/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\377\377\377\377"
      }
    }
  }
}
node {
  name: "bert/embeddings/Slice"
  op: "Slice"
  input: "bert/embeddings/position_embeddings/read"
  input: "bert/embeddings/Slice/begin"
  input: "bert/embeddings/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/Reshape_4/shape"
  op: "Const"
  input: "^bert/embeddings/assert_less_equal/Assert/Assert"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\003\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/embeddings/Reshape_4"
  op: "Reshape"
  input: "bert/embeddings/Slice"
  input: "bert/embeddings/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/embeddings/add_1"
  op: "Add"
  input: "bert/embeddings/add"
  input: "bert/embeddings/Reshape_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/embeddings/LayerNorm/beta"
  input: "bert/embeddings/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/embeddings/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/embeddings/LayerNorm/gamma"
  input: "bert/embeddings/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/embeddings/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/embeddings/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/embeddings/add_1"
  input: "bert/embeddings/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/embeddings/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/embeddings/add_1"
  input: "bert/embeddings/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/embeddings/LayerNorm/moments/SquaredDifference"
  input: "bert/embeddings/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/embeddings/LayerNorm/moments/variance"
  input: "bert/embeddings/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/embeddings/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/embeddings/LayerNorm/batchnorm/Rsqrt"
  input: "bert/embeddings/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/embeddings/add_1"
  input: "bert/embeddings/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/embeddings/LayerNorm/moments/mean"
  input: "bert/embeddings/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/embeddings/LayerNorm/beta/read"
  input: "bert/embeddings/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/embeddings/LayerNorm/batchnorm/mul_1"
  input: "bert/embeddings/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/embeddings/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/embeddings/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/embeddings/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/embeddings/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/embeddings/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/embeddings/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/embeddings/dropout/random_uniform/max"
  input: "bert/embeddings/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/embeddings/dropout/random_uniform/RandomUniform"
  input: "bert/embeddings/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/dropout/random_uniform"
  op: "Add"
  input: "bert/embeddings/dropout/random_uniform/mul"
  input: "bert/embeddings/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/dropout/add"
  op: "Add"
  input: "bert/embeddings/dropout/keep_prob"
  input: "bert/embeddings/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/dropout/Floor"
  op: "Floor"
  input: "bert/embeddings/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/dropout/div"
  op: "RealDiv"
  input: "bert/embeddings/LayerNorm/batchnorm/add_1"
  input: "bert/embeddings/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/embeddings/dropout/mul"
  op: "Mul"
  input: "bert/embeddings/dropout/div"
  input: "bert/embeddings/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/Reshape"
  op: "Reshape"
  input: "Const_1"
  input: "bert/encoder/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/Cast"
  op: "Cast"
  input: "bert/encoder/Reshape"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/ones"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 2
          }
          dim {
            size: 3
          }
          dim {
            size: 1
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/mul"
  op: "Mul"
  input: "bert/encoder/ones"
  input: "bert/encoder/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/Reshape_1"
  op: "Reshape"
  input: "bert/embeddings/dropout/mul"
  input: "bert/encoder/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/query/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/query/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_0/attention/self/query/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/query/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_0/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/query/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_0/attention/self/query/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_0/attention/self/query/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/query/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/query/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/attention/self/query/kernel"
  input: "bert/encoder/layer_0/attention/self/query/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/query/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_0/attention/self/query/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/query/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/query/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/query/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/attention/self/query/bias"
  input: "bert/encoder/layer_0/attention/self/query/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/query/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_0/attention/self/query/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/query/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/query/MatMul"
  op: "MatMul"
  input: "bert/encoder/Reshape_1"
  input: "bert/encoder/layer_0/attention/self/query/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/query/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_0/attention/self/query/MatMul"
  input: "bert/encoder/layer_0/attention/self/query/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/key/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/key/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_0/attention/self/key/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/key/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_0/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/key/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_0/attention/self/key/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_0/attention/self/key/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/key/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/key/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/attention/self/key/kernel"
  input: "bert/encoder/layer_0/attention/self/key/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/key/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_0/attention/self/key/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/key/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/key/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/key/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/attention/self/key/bias"
  input: "bert/encoder/layer_0/attention/self/key/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/key/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_0/attention/self/key/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/key/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/key/MatMul"
  op: "MatMul"
  input: "bert/encoder/Reshape_1"
  input: "bert/encoder/layer_0/attention/self/key/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/key/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_0/attention/self/key/MatMul"
  input: "bert/encoder/layer_0/attention/self/key/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/value/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/value/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_0/attention/self/value/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/value/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_0/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/value/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_0/attention/self/value/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_0/attention/self/value/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/value/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/value/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/attention/self/value/kernel"
  input: "bert/encoder/layer_0/attention/self/value/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/value/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_0/attention/self/value/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/value/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/value/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/value/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/attention/self/value/bias"
  input: "bert/encoder/layer_0/attention/self/value/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/value/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_0/attention/self/value/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/self/value/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/value/MatMul"
  op: "MatMul"
  input: "bert/encoder/Reshape_1"
  input: "bert/encoder/layer_0/attention/self/value/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/value/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_0/attention/self/value/MatMul"
  input: "bert/encoder/layer_0/attention/self/value/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Reshape"
  op: "Reshape"
  input: "bert/encoder/layer_0/attention/self/query/BiasAdd"
  input: "bert/encoder/layer_0/attention/self/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/transpose"
  op: "Transpose"
  input: "bert/encoder/layer_0/attention/self/Reshape"
  input: "bert/encoder/layer_0/attention/self/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Reshape_1"
  op: "Reshape"
  input: "bert/encoder/layer_0/attention/self/key/BiasAdd"
  input: "bert/encoder/layer_0/attention/self/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/transpose_1"
  op: "Transpose"
  input: "bert/encoder/layer_0/attention/self/Reshape_1"
  input: "bert/encoder/layer_0/attention/self/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/MatMul"
  op: "BatchMatMul"
  input: "bert/encoder/layer_0/attention/self/transpose"
  input: "bert/encoder/layer_0/attention/self/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10783277451992035
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Mul"
  op: "Mul"
  input: "bert/encoder/layer_0/attention/self/MatMul"
  input: "bert/encoder/layer_0/attention/self/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/ExpandDims"
  op: "ExpandDims"
  input: "bert/encoder/mul"
  input: "bert/encoder/layer_0/attention/self/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/sub"
  op: "Sub"
  input: "bert/encoder/layer_0/attention/self/sub/x"
  input: "bert/encoder/layer_0/attention/self/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -10000.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/attention/self/sub"
  input: "bert/encoder/layer_0/attention/self/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/add"
  op: "Add"
  input: "bert/encoder/layer_0/attention/self/Mul"
  input: "bert/encoder/layer_0/attention/self/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Sub"
  op: "Sub"
  input: "bert/encoder/layer_0/attention/self/Rank"
  input: "bert/encoder/layer_0/attention/self/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Slice/begin"
  op: "Pack"
  input: "bert/encoder/layer_0/attention/self/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Slice"
  op: "Slice"
  input: "bert/encoder/layer_0/attention/self/Shape_1"
  input: "bert/encoder/layer_0/attention/self/Slice/begin"
  input: "bert/encoder/layer_0/attention/self/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/concat"
  op: "ConcatV2"
  input: "bert/encoder/layer_0/attention/self/concat/values_0"
  input: "bert/encoder/layer_0/attention/self/Slice"
  input: "bert/encoder/layer_0/attention/self/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Reshape_2"
  op: "Reshape"
  input: "bert/encoder/layer_0/attention/self/add"
  input: "bert/encoder/layer_0/attention/self/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Softmax"
  op: "Softmax"
  input: "bert/encoder/layer_0/attention/self/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Reshape_3"
  op: "Reshape"
  input: "bert/encoder/layer_0/attention/self/Softmax"
  input: "bert/encoder/layer_0/attention/self/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_0/attention/self/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_0/attention/self/dropout/random_uniform/max"
  input: "bert/encoder/layer_0/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/attention/self/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_0/attention/self/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_0/attention/self/dropout/random_uniform/mul"
  input: "bert/encoder/layer_0/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_0/attention/self/dropout/keep_prob"
  input: "bert/encoder/layer_0/attention/self/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_0/attention/self/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_0/attention/self/Reshape_3"
  input: "bert/encoder/layer_0/attention/self/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/attention/self/dropout/div"
  input: "bert/encoder/layer_0/attention/self/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Reshape_4"
  op: "Reshape"
  input: "bert/encoder/layer_0/attention/self/value/BiasAdd"
  input: "bert/encoder/layer_0/attention/self/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/transpose_2"
  op: "Transpose"
  input: "bert/encoder/layer_0/attention/self/Reshape_4"
  input: "bert/encoder/layer_0/attention/self/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/MatMul_1"
  op: "BatchMatMul"
  input: "bert/encoder/layer_0/attention/self/dropout/mul"
  input: "bert/encoder/layer_0/attention/self/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/transpose_3"
  op: "Transpose"
  input: "bert/encoder/layer_0/attention/self/MatMul_1"
  input: "bert/encoder/layer_0/attention/self/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Reshape_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/self/Reshape_5"
  op: "Reshape"
  input: "bert/encoder/layer_0/attention/self/transpose_3"
  input: "bert/encoder/layer_0/attention/self/Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_0/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_0/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_0/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_0/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/attention/output/dense/kernel"
  input: "bert/encoder/layer_0/attention/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_0/attention/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/attention/output/dense/bias"
  input: "bert/encoder/layer_0/attention/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_0/attention/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_0/attention/self/Reshape_5"
  input: "bert/encoder/layer_0/attention/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_0/attention/output/dense/MatMul"
  input: "bert/encoder/layer_0/attention/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_0/attention/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_0/attention/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_0/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/attention/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_0/attention/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_0/attention/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_0/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_0/attention/output/dropout/keep_prob"
  input: "bert/encoder/layer_0/attention/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_0/attention/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_0/attention/output/dense/BiasAdd"
  input: "bert/encoder/layer_0/attention/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/attention/output/dropout/div"
  input: "bert/encoder/layer_0/attention/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/add"
  op: "Add"
  input: "bert/encoder/layer_0/attention/output/dropout/mul"
  input: "bert/encoder/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/beta"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/gamma"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/attention/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_0/attention/output/add"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_0/attention/output/add"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_0/attention/output/add"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_0/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_0/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_0/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_0/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/intermediate/dense/kernel"
  input: "bert/encoder/layer_0/intermediate/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_0/intermediate/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/bias/Initializer/zeros"
  op: "Fill"
  input: "bert/encoder/layer_0/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  input: "bert/encoder/layer_0/intermediate/dense/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/intermediate/dense/bias"
  input: "bert/encoder/layer_0/intermediate/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_0/intermediate/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/intermediate/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_0/intermediate/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_0/intermediate/dense/MatMul"
  input: "bert/encoder/layer_0/intermediate/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/Pow"
  op: "Pow"
  input: "bert/encoder/layer_0/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_0/intermediate/dense/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.044714998453855515
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/intermediate/dense/mul/x"
  input: "bert/encoder/layer_0/intermediate/dense/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/add"
  op: "Add"
  input: "bert/encoder/layer_0/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_0/intermediate/dense/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7978845834732056
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_0/intermediate/dense/mul_1/x"
  input: "bert/encoder/layer_0/intermediate/dense/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/Tanh"
  op: "Tanh"
  input: "bert/encoder/layer_0/intermediate/dense/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/add_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/add_1"
  op: "Add"
  input: "bert/encoder/layer_0/intermediate/dense/add_1/x"
  input: "bert/encoder/layer_0/intermediate/dense/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_0/intermediate/dense/mul_2/x"
  input: "bert/encoder/layer_0/intermediate/dense/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/intermediate/dense/mul_3"
  op: "Mul"
  input: "bert/encoder/layer_0/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_0/intermediate/dense/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_0/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_0/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_0/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_0/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/output/dense/kernel"
  input: "bert/encoder/layer_0/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_0/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/output/dense/bias"
  input: "bert/encoder/layer_0/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_0/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_0/intermediate/dense/mul_3"
  input: "bert/encoder/layer_0/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_0/output/dense/MatMul"
  input: "bert/encoder/layer_0/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_0/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_0/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_0/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_0/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_0/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_0/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_0/output/dropout/keep_prob"
  input: "bert/encoder/layer_0/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_0/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_0/output/dense/BiasAdd"
  input: "bert/encoder/layer_0/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/output/dropout/div"
  input: "bert/encoder/layer_0/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/add"
  op: "Add"
  input: "bert/encoder/layer_0/output/dropout/mul"
  input: "bert/encoder/layer_0/attention/output/LayerNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/output/LayerNorm/beta"
  input: "bert/encoder/layer_0/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_0/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_0/output/LayerNorm/gamma"
  input: "bert/encoder/layer_0/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_0/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_0/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_0/output/add"
  input: "bert/encoder/layer_0/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_0/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_0/output/add"
  input: "bert/encoder/layer_0/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_0/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_0/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_0/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_0/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_0/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_0/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_0/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_0/output/add"
  input: "bert/encoder/layer_0/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_0/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_0/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_0/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_0/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_0/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_0/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_0/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/query/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/query/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_1/attention/self/query/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/query/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_1/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/query/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_1/attention/self/query/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_1/attention/self/query/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/query/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/query/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/attention/self/query/kernel"
  input: "bert/encoder/layer_1/attention/self/query/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/query/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_1/attention/self/query/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/query/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/query/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/query/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/attention/self/query/bias"
  input: "bert/encoder/layer_1/attention/self/query/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/query/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_1/attention/self/query/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/query/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/query/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_0/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_1/attention/self/query/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/query/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_1/attention/self/query/MatMul"
  input: "bert/encoder/layer_1/attention/self/query/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/key/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/key/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_1/attention/self/key/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/key/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_1/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/key/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_1/attention/self/key/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_1/attention/self/key/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/key/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/key/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/attention/self/key/kernel"
  input: "bert/encoder/layer_1/attention/self/key/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/key/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_1/attention/self/key/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/key/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/key/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/key/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/attention/self/key/bias"
  input: "bert/encoder/layer_1/attention/self/key/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/key/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_1/attention/self/key/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/key/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/key/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_0/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_1/attention/self/key/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/key/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_1/attention/self/key/MatMul"
  input: "bert/encoder/layer_1/attention/self/key/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/value/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/value/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_1/attention/self/value/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/value/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_1/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/value/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_1/attention/self/value/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_1/attention/self/value/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/value/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/value/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/attention/self/value/kernel"
  input: "bert/encoder/layer_1/attention/self/value/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/value/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_1/attention/self/value/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/value/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/value/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/value/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/attention/self/value/bias"
  input: "bert/encoder/layer_1/attention/self/value/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/value/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_1/attention/self/value/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/self/value/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/value/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_0/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_1/attention/self/value/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/value/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_1/attention/self/value/MatMul"
  input: "bert/encoder/layer_1/attention/self/value/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Reshape"
  op: "Reshape"
  input: "bert/encoder/layer_1/attention/self/query/BiasAdd"
  input: "bert/encoder/layer_1/attention/self/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/transpose"
  op: "Transpose"
  input: "bert/encoder/layer_1/attention/self/Reshape"
  input: "bert/encoder/layer_1/attention/self/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Reshape_1"
  op: "Reshape"
  input: "bert/encoder/layer_1/attention/self/key/BiasAdd"
  input: "bert/encoder/layer_1/attention/self/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/transpose_1"
  op: "Transpose"
  input: "bert/encoder/layer_1/attention/self/Reshape_1"
  input: "bert/encoder/layer_1/attention/self/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/MatMul"
  op: "BatchMatMul"
  input: "bert/encoder/layer_1/attention/self/transpose"
  input: "bert/encoder/layer_1/attention/self/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10783277451992035
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Mul"
  op: "Mul"
  input: "bert/encoder/layer_1/attention/self/MatMul"
  input: "bert/encoder/layer_1/attention/self/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/ExpandDims"
  op: "ExpandDims"
  input: "bert/encoder/mul"
  input: "bert/encoder/layer_1/attention/self/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/sub"
  op: "Sub"
  input: "bert/encoder/layer_1/attention/self/sub/x"
  input: "bert/encoder/layer_1/attention/self/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -10000.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/attention/self/sub"
  input: "bert/encoder/layer_1/attention/self/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/add"
  op: "Add"
  input: "bert/encoder/layer_1/attention/self/Mul"
  input: "bert/encoder/layer_1/attention/self/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Sub"
  op: "Sub"
  input: "bert/encoder/layer_1/attention/self/Rank"
  input: "bert/encoder/layer_1/attention/self/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Slice/begin"
  op: "Pack"
  input: "bert/encoder/layer_1/attention/self/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Slice"
  op: "Slice"
  input: "bert/encoder/layer_1/attention/self/Shape_1"
  input: "bert/encoder/layer_1/attention/self/Slice/begin"
  input: "bert/encoder/layer_1/attention/self/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/concat"
  op: "ConcatV2"
  input: "bert/encoder/layer_1/attention/self/concat/values_0"
  input: "bert/encoder/layer_1/attention/self/Slice"
  input: "bert/encoder/layer_1/attention/self/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Reshape_2"
  op: "Reshape"
  input: "bert/encoder/layer_1/attention/self/add"
  input: "bert/encoder/layer_1/attention/self/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Softmax"
  op: "Softmax"
  input: "bert/encoder/layer_1/attention/self/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Reshape_3"
  op: "Reshape"
  input: "bert/encoder/layer_1/attention/self/Softmax"
  input: "bert/encoder/layer_1/attention/self/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_1/attention/self/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_1/attention/self/dropout/random_uniform/max"
  input: "bert/encoder/layer_1/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/attention/self/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_1/attention/self/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_1/attention/self/dropout/random_uniform/mul"
  input: "bert/encoder/layer_1/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_1/attention/self/dropout/keep_prob"
  input: "bert/encoder/layer_1/attention/self/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_1/attention/self/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_1/attention/self/Reshape_3"
  input: "bert/encoder/layer_1/attention/self/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/attention/self/dropout/div"
  input: "bert/encoder/layer_1/attention/self/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Reshape_4"
  op: "Reshape"
  input: "bert/encoder/layer_1/attention/self/value/BiasAdd"
  input: "bert/encoder/layer_1/attention/self/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/transpose_2"
  op: "Transpose"
  input: "bert/encoder/layer_1/attention/self/Reshape_4"
  input: "bert/encoder/layer_1/attention/self/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/MatMul_1"
  op: "BatchMatMul"
  input: "bert/encoder/layer_1/attention/self/dropout/mul"
  input: "bert/encoder/layer_1/attention/self/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/transpose_3"
  op: "Transpose"
  input: "bert/encoder/layer_1/attention/self/MatMul_1"
  input: "bert/encoder/layer_1/attention/self/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Reshape_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/self/Reshape_5"
  op: "Reshape"
  input: "bert/encoder/layer_1/attention/self/transpose_3"
  input: "bert/encoder/layer_1/attention/self/Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_1/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_1/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_1/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_1/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/attention/output/dense/kernel"
  input: "bert/encoder/layer_1/attention/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_1/attention/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/attention/output/dense/bias"
  input: "bert/encoder/layer_1/attention/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_1/attention/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_1/attention/self/Reshape_5"
  input: "bert/encoder/layer_1/attention/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_1/attention/output/dense/MatMul"
  input: "bert/encoder/layer_1/attention/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_1/attention/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_1/attention/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_1/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/attention/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_1/attention/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_1/attention/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_1/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_1/attention/output/dropout/keep_prob"
  input: "bert/encoder/layer_1/attention/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_1/attention/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_1/attention/output/dense/BiasAdd"
  input: "bert/encoder/layer_1/attention/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/attention/output/dropout/div"
  input: "bert/encoder/layer_1/attention/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/add"
  op: "Add"
  input: "bert/encoder/layer_1/attention/output/dropout/mul"
  input: "bert/encoder/layer_0/output/LayerNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/beta"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/gamma"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/attention/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_1/attention/output/add"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_1/attention/output/add"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_1/attention/output/add"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_1/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_1/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_1/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_1/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/intermediate/dense/kernel"
  input: "bert/encoder/layer_1/intermediate/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_1/intermediate/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/bias/Initializer/zeros"
  op: "Fill"
  input: "bert/encoder/layer_1/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  input: "bert/encoder/layer_1/intermediate/dense/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/intermediate/dense/bias"
  input: "bert/encoder/layer_1/intermediate/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_1/intermediate/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/intermediate/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_1/intermediate/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_1/intermediate/dense/MatMul"
  input: "bert/encoder/layer_1/intermediate/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/Pow"
  op: "Pow"
  input: "bert/encoder/layer_1/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_1/intermediate/dense/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.044714998453855515
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/intermediate/dense/mul/x"
  input: "bert/encoder/layer_1/intermediate/dense/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/add"
  op: "Add"
  input: "bert/encoder/layer_1/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_1/intermediate/dense/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7978845834732056
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_1/intermediate/dense/mul_1/x"
  input: "bert/encoder/layer_1/intermediate/dense/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/Tanh"
  op: "Tanh"
  input: "bert/encoder/layer_1/intermediate/dense/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/add_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/add_1"
  op: "Add"
  input: "bert/encoder/layer_1/intermediate/dense/add_1/x"
  input: "bert/encoder/layer_1/intermediate/dense/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_1/intermediate/dense/mul_2/x"
  input: "bert/encoder/layer_1/intermediate/dense/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/intermediate/dense/mul_3"
  op: "Mul"
  input: "bert/encoder/layer_1/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_1/intermediate/dense/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_1/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_1/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_1/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_1/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/output/dense/kernel"
  input: "bert/encoder/layer_1/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_1/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/output/dense/bias"
  input: "bert/encoder/layer_1/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_1/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_1/intermediate/dense/mul_3"
  input: "bert/encoder/layer_1/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_1/output/dense/MatMul"
  input: "bert/encoder/layer_1/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_1/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_1/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_1/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_1/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_1/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_1/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_1/output/dropout/keep_prob"
  input: "bert/encoder/layer_1/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_1/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_1/output/dense/BiasAdd"
  input: "bert/encoder/layer_1/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/output/dropout/div"
  input: "bert/encoder/layer_1/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/add"
  op: "Add"
  input: "bert/encoder/layer_1/output/dropout/mul"
  input: "bert/encoder/layer_1/attention/output/LayerNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/output/LayerNorm/beta"
  input: "bert/encoder/layer_1/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_1/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_1/output/LayerNorm/gamma"
  input: "bert/encoder/layer_1/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_1/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_1/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_1/output/add"
  input: "bert/encoder/layer_1/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_1/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_1/output/add"
  input: "bert/encoder/layer_1/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_1/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_1/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_1/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_1/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_1/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_1/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_1/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_1/output/add"
  input: "bert/encoder/layer_1/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_1/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_1/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_1/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_1/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_1/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_1/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_1/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/query/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/query/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_2/attention/self/query/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/query/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_2/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/query/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_2/attention/self/query/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_2/attention/self/query/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/query/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/query/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/attention/self/query/kernel"
  input: "bert/encoder/layer_2/attention/self/query/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/query/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_2/attention/self/query/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/query/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/query/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/query/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/attention/self/query/bias"
  input: "bert/encoder/layer_2/attention/self/query/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/query/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_2/attention/self/query/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/query/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/query/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_1/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_2/attention/self/query/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/query/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_2/attention/self/query/MatMul"
  input: "bert/encoder/layer_2/attention/self/query/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/key/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/key/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_2/attention/self/key/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/key/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_2/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/key/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_2/attention/self/key/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_2/attention/self/key/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/key/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/key/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/attention/self/key/kernel"
  input: "bert/encoder/layer_2/attention/self/key/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/key/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_2/attention/self/key/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/key/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/key/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/key/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/attention/self/key/bias"
  input: "bert/encoder/layer_2/attention/self/key/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/key/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_2/attention/self/key/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/key/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/key/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_1/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_2/attention/self/key/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/key/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_2/attention/self/key/MatMul"
  input: "bert/encoder/layer_2/attention/self/key/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/value/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/value/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_2/attention/self/value/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/value/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_2/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/value/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_2/attention/self/value/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_2/attention/self/value/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/value/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/value/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/attention/self/value/kernel"
  input: "bert/encoder/layer_2/attention/self/value/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/value/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_2/attention/self/value/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/value/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/value/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/value/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/attention/self/value/bias"
  input: "bert/encoder/layer_2/attention/self/value/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/value/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_2/attention/self/value/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/self/value/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/value/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_1/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_2/attention/self/value/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/value/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_2/attention/self/value/MatMul"
  input: "bert/encoder/layer_2/attention/self/value/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Reshape"
  op: "Reshape"
  input: "bert/encoder/layer_2/attention/self/query/BiasAdd"
  input: "bert/encoder/layer_2/attention/self/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/transpose"
  op: "Transpose"
  input: "bert/encoder/layer_2/attention/self/Reshape"
  input: "bert/encoder/layer_2/attention/self/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Reshape_1"
  op: "Reshape"
  input: "bert/encoder/layer_2/attention/self/key/BiasAdd"
  input: "bert/encoder/layer_2/attention/self/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/transpose_1"
  op: "Transpose"
  input: "bert/encoder/layer_2/attention/self/Reshape_1"
  input: "bert/encoder/layer_2/attention/self/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/MatMul"
  op: "BatchMatMul"
  input: "bert/encoder/layer_2/attention/self/transpose"
  input: "bert/encoder/layer_2/attention/self/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10783277451992035
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Mul"
  op: "Mul"
  input: "bert/encoder/layer_2/attention/self/MatMul"
  input: "bert/encoder/layer_2/attention/self/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/ExpandDims"
  op: "ExpandDims"
  input: "bert/encoder/mul"
  input: "bert/encoder/layer_2/attention/self/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/sub"
  op: "Sub"
  input: "bert/encoder/layer_2/attention/self/sub/x"
  input: "bert/encoder/layer_2/attention/self/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -10000.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/attention/self/sub"
  input: "bert/encoder/layer_2/attention/self/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/add"
  op: "Add"
  input: "bert/encoder/layer_2/attention/self/Mul"
  input: "bert/encoder/layer_2/attention/self/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Sub"
  op: "Sub"
  input: "bert/encoder/layer_2/attention/self/Rank"
  input: "bert/encoder/layer_2/attention/self/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Slice/begin"
  op: "Pack"
  input: "bert/encoder/layer_2/attention/self/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Slice"
  op: "Slice"
  input: "bert/encoder/layer_2/attention/self/Shape_1"
  input: "bert/encoder/layer_2/attention/self/Slice/begin"
  input: "bert/encoder/layer_2/attention/self/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/concat"
  op: "ConcatV2"
  input: "bert/encoder/layer_2/attention/self/concat/values_0"
  input: "bert/encoder/layer_2/attention/self/Slice"
  input: "bert/encoder/layer_2/attention/self/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Reshape_2"
  op: "Reshape"
  input: "bert/encoder/layer_2/attention/self/add"
  input: "bert/encoder/layer_2/attention/self/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Softmax"
  op: "Softmax"
  input: "bert/encoder/layer_2/attention/self/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Reshape_3"
  op: "Reshape"
  input: "bert/encoder/layer_2/attention/self/Softmax"
  input: "bert/encoder/layer_2/attention/self/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_2/attention/self/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_2/attention/self/dropout/random_uniform/max"
  input: "bert/encoder/layer_2/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/attention/self/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_2/attention/self/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_2/attention/self/dropout/random_uniform/mul"
  input: "bert/encoder/layer_2/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_2/attention/self/dropout/keep_prob"
  input: "bert/encoder/layer_2/attention/self/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_2/attention/self/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_2/attention/self/Reshape_3"
  input: "bert/encoder/layer_2/attention/self/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/attention/self/dropout/div"
  input: "bert/encoder/layer_2/attention/self/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Reshape_4"
  op: "Reshape"
  input: "bert/encoder/layer_2/attention/self/value/BiasAdd"
  input: "bert/encoder/layer_2/attention/self/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/transpose_2"
  op: "Transpose"
  input: "bert/encoder/layer_2/attention/self/Reshape_4"
  input: "bert/encoder/layer_2/attention/self/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/MatMul_1"
  op: "BatchMatMul"
  input: "bert/encoder/layer_2/attention/self/dropout/mul"
  input: "bert/encoder/layer_2/attention/self/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/transpose_3"
  op: "Transpose"
  input: "bert/encoder/layer_2/attention/self/MatMul_1"
  input: "bert/encoder/layer_2/attention/self/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Reshape_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/self/Reshape_5"
  op: "Reshape"
  input: "bert/encoder/layer_2/attention/self/transpose_3"
  input: "bert/encoder/layer_2/attention/self/Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_2/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_2/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_2/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_2/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/attention/output/dense/kernel"
  input: "bert/encoder/layer_2/attention/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_2/attention/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/attention/output/dense/bias"
  input: "bert/encoder/layer_2/attention/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_2/attention/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_2/attention/self/Reshape_5"
  input: "bert/encoder/layer_2/attention/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_2/attention/output/dense/MatMul"
  input: "bert/encoder/layer_2/attention/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_2/attention/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_2/attention/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_2/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/attention/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_2/attention/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_2/attention/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_2/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_2/attention/output/dropout/keep_prob"
  input: "bert/encoder/layer_2/attention/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_2/attention/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_2/attention/output/dense/BiasAdd"
  input: "bert/encoder/layer_2/attention/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/attention/output/dropout/div"
  input: "bert/encoder/layer_2/attention/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/add"
  op: "Add"
  input: "bert/encoder/layer_2/attention/output/dropout/mul"
  input: "bert/encoder/layer_1/output/LayerNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/beta"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/gamma"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/attention/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_2/attention/output/add"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_2/attention/output/add"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_2/attention/output/add"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_2/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_2/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_2/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_2/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/intermediate/dense/kernel"
  input: "bert/encoder/layer_2/intermediate/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_2/intermediate/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/bias/Initializer/zeros"
  op: "Fill"
  input: "bert/encoder/layer_2/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  input: "bert/encoder/layer_2/intermediate/dense/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/intermediate/dense/bias"
  input: "bert/encoder/layer_2/intermediate/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_2/intermediate/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/intermediate/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_2/intermediate/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_2/intermediate/dense/MatMul"
  input: "bert/encoder/layer_2/intermediate/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/Pow"
  op: "Pow"
  input: "bert/encoder/layer_2/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_2/intermediate/dense/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.044714998453855515
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/intermediate/dense/mul/x"
  input: "bert/encoder/layer_2/intermediate/dense/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/add"
  op: "Add"
  input: "bert/encoder/layer_2/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_2/intermediate/dense/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7978845834732056
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_2/intermediate/dense/mul_1/x"
  input: "bert/encoder/layer_2/intermediate/dense/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/Tanh"
  op: "Tanh"
  input: "bert/encoder/layer_2/intermediate/dense/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/add_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/add_1"
  op: "Add"
  input: "bert/encoder/layer_2/intermediate/dense/add_1/x"
  input: "bert/encoder/layer_2/intermediate/dense/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_2/intermediate/dense/mul_2/x"
  input: "bert/encoder/layer_2/intermediate/dense/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/intermediate/dense/mul_3"
  op: "Mul"
  input: "bert/encoder/layer_2/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_2/intermediate/dense/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_2/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_2/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_2/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_2/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/output/dense/kernel"
  input: "bert/encoder/layer_2/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_2/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/output/dense/bias"
  input: "bert/encoder/layer_2/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_2/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_2/intermediate/dense/mul_3"
  input: "bert/encoder/layer_2/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_2/output/dense/MatMul"
  input: "bert/encoder/layer_2/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_2/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_2/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_2/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_2/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_2/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_2/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_2/output/dropout/keep_prob"
  input: "bert/encoder/layer_2/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_2/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_2/output/dense/BiasAdd"
  input: "bert/encoder/layer_2/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/output/dropout/div"
  input: "bert/encoder/layer_2/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/add"
  op: "Add"
  input: "bert/encoder/layer_2/output/dropout/mul"
  input: "bert/encoder/layer_2/attention/output/LayerNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/output/LayerNorm/beta"
  input: "bert/encoder/layer_2/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_2/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_2/output/LayerNorm/gamma"
  input: "bert/encoder/layer_2/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_2/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_2/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_2/output/add"
  input: "bert/encoder/layer_2/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_2/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_2/output/add"
  input: "bert/encoder/layer_2/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_2/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_2/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_2/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_2/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_2/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_2/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_2/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_2/output/add"
  input: "bert/encoder/layer_2/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_2/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_2/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_2/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_2/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_2/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_2/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_2/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/query/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/query/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_3/attention/self/query/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/query/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_3/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/query/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_3/attention/self/query/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_3/attention/self/query/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/query/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/query/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/attention/self/query/kernel"
  input: "bert/encoder/layer_3/attention/self/query/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/query/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_3/attention/self/query/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/query/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/query/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/query/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/attention/self/query/bias"
  input: "bert/encoder/layer_3/attention/self/query/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/query/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_3/attention/self/query/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/query/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/query/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_2/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_3/attention/self/query/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/query/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_3/attention/self/query/MatMul"
  input: "bert/encoder/layer_3/attention/self/query/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/key/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/key/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_3/attention/self/key/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/key/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_3/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/key/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_3/attention/self/key/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_3/attention/self/key/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/key/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/key/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/attention/self/key/kernel"
  input: "bert/encoder/layer_3/attention/self/key/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/key/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_3/attention/self/key/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/key/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/key/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/key/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/attention/self/key/bias"
  input: "bert/encoder/layer_3/attention/self/key/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/key/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_3/attention/self/key/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/key/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/key/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_2/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_3/attention/self/key/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/key/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_3/attention/self/key/MatMul"
  input: "bert/encoder/layer_3/attention/self/key/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/value/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/value/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_3/attention/self/value/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/value/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_3/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/value/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_3/attention/self/value/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_3/attention/self/value/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/value/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/value/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/attention/self/value/kernel"
  input: "bert/encoder/layer_3/attention/self/value/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/value/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_3/attention/self/value/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/value/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/value/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/value/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/attention/self/value/bias"
  input: "bert/encoder/layer_3/attention/self/value/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/value/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_3/attention/self/value/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/self/value/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/value/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_2/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_3/attention/self/value/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/value/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_3/attention/self/value/MatMul"
  input: "bert/encoder/layer_3/attention/self/value/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Reshape"
  op: "Reshape"
  input: "bert/encoder/layer_3/attention/self/query/BiasAdd"
  input: "bert/encoder/layer_3/attention/self/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/transpose"
  op: "Transpose"
  input: "bert/encoder/layer_3/attention/self/Reshape"
  input: "bert/encoder/layer_3/attention/self/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Reshape_1"
  op: "Reshape"
  input: "bert/encoder/layer_3/attention/self/key/BiasAdd"
  input: "bert/encoder/layer_3/attention/self/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/transpose_1"
  op: "Transpose"
  input: "bert/encoder/layer_3/attention/self/Reshape_1"
  input: "bert/encoder/layer_3/attention/self/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/MatMul"
  op: "BatchMatMul"
  input: "bert/encoder/layer_3/attention/self/transpose"
  input: "bert/encoder/layer_3/attention/self/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10783277451992035
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Mul"
  op: "Mul"
  input: "bert/encoder/layer_3/attention/self/MatMul"
  input: "bert/encoder/layer_3/attention/self/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/ExpandDims"
  op: "ExpandDims"
  input: "bert/encoder/mul"
  input: "bert/encoder/layer_3/attention/self/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/sub"
  op: "Sub"
  input: "bert/encoder/layer_3/attention/self/sub/x"
  input: "bert/encoder/layer_3/attention/self/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -10000.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/attention/self/sub"
  input: "bert/encoder/layer_3/attention/self/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/add"
  op: "Add"
  input: "bert/encoder/layer_3/attention/self/Mul"
  input: "bert/encoder/layer_3/attention/self/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Sub"
  op: "Sub"
  input: "bert/encoder/layer_3/attention/self/Rank"
  input: "bert/encoder/layer_3/attention/self/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Slice/begin"
  op: "Pack"
  input: "bert/encoder/layer_3/attention/self/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Slice"
  op: "Slice"
  input: "bert/encoder/layer_3/attention/self/Shape_1"
  input: "bert/encoder/layer_3/attention/self/Slice/begin"
  input: "bert/encoder/layer_3/attention/self/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/concat"
  op: "ConcatV2"
  input: "bert/encoder/layer_3/attention/self/concat/values_0"
  input: "bert/encoder/layer_3/attention/self/Slice"
  input: "bert/encoder/layer_3/attention/self/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Reshape_2"
  op: "Reshape"
  input: "bert/encoder/layer_3/attention/self/add"
  input: "bert/encoder/layer_3/attention/self/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Softmax"
  op: "Softmax"
  input: "bert/encoder/layer_3/attention/self/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Reshape_3"
  op: "Reshape"
  input: "bert/encoder/layer_3/attention/self/Softmax"
  input: "bert/encoder/layer_3/attention/self/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_3/attention/self/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_3/attention/self/dropout/random_uniform/max"
  input: "bert/encoder/layer_3/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/attention/self/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_3/attention/self/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_3/attention/self/dropout/random_uniform/mul"
  input: "bert/encoder/layer_3/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_3/attention/self/dropout/keep_prob"
  input: "bert/encoder/layer_3/attention/self/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_3/attention/self/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_3/attention/self/Reshape_3"
  input: "bert/encoder/layer_3/attention/self/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/attention/self/dropout/div"
  input: "bert/encoder/layer_3/attention/self/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Reshape_4"
  op: "Reshape"
  input: "bert/encoder/layer_3/attention/self/value/BiasAdd"
  input: "bert/encoder/layer_3/attention/self/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/transpose_2"
  op: "Transpose"
  input: "bert/encoder/layer_3/attention/self/Reshape_4"
  input: "bert/encoder/layer_3/attention/self/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/MatMul_1"
  op: "BatchMatMul"
  input: "bert/encoder/layer_3/attention/self/dropout/mul"
  input: "bert/encoder/layer_3/attention/self/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/transpose_3"
  op: "Transpose"
  input: "bert/encoder/layer_3/attention/self/MatMul_1"
  input: "bert/encoder/layer_3/attention/self/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Reshape_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/self/Reshape_5"
  op: "Reshape"
  input: "bert/encoder/layer_3/attention/self/transpose_3"
  input: "bert/encoder/layer_3/attention/self/Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_3/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_3/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_3/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_3/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/attention/output/dense/kernel"
  input: "bert/encoder/layer_3/attention/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_3/attention/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/attention/output/dense/bias"
  input: "bert/encoder/layer_3/attention/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_3/attention/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_3/attention/self/Reshape_5"
  input: "bert/encoder/layer_3/attention/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_3/attention/output/dense/MatMul"
  input: "bert/encoder/layer_3/attention/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_3/attention/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_3/attention/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_3/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/attention/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_3/attention/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_3/attention/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_3/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_3/attention/output/dropout/keep_prob"
  input: "bert/encoder/layer_3/attention/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_3/attention/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_3/attention/output/dense/BiasAdd"
  input: "bert/encoder/layer_3/attention/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/attention/output/dropout/div"
  input: "bert/encoder/layer_3/attention/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/add"
  op: "Add"
  input: "bert/encoder/layer_3/attention/output/dropout/mul"
  input: "bert/encoder/layer_2/output/LayerNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/beta"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/gamma"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/attention/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_3/attention/output/add"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_3/attention/output/add"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_3/attention/output/add"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_3/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_3/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_3/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_3/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/intermediate/dense/kernel"
  input: "bert/encoder/layer_3/intermediate/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_3/intermediate/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/bias/Initializer/zeros"
  op: "Fill"
  input: "bert/encoder/layer_3/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  input: "bert/encoder/layer_3/intermediate/dense/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/intermediate/dense/bias"
  input: "bert/encoder/layer_3/intermediate/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_3/intermediate/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/intermediate/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_3/intermediate/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_3/intermediate/dense/MatMul"
  input: "bert/encoder/layer_3/intermediate/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/Pow"
  op: "Pow"
  input: "bert/encoder/layer_3/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_3/intermediate/dense/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.044714998453855515
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/intermediate/dense/mul/x"
  input: "bert/encoder/layer_3/intermediate/dense/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/add"
  op: "Add"
  input: "bert/encoder/layer_3/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_3/intermediate/dense/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7978845834732056
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_3/intermediate/dense/mul_1/x"
  input: "bert/encoder/layer_3/intermediate/dense/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/Tanh"
  op: "Tanh"
  input: "bert/encoder/layer_3/intermediate/dense/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/add_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/add_1"
  op: "Add"
  input: "bert/encoder/layer_3/intermediate/dense/add_1/x"
  input: "bert/encoder/layer_3/intermediate/dense/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_3/intermediate/dense/mul_2/x"
  input: "bert/encoder/layer_3/intermediate/dense/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/intermediate/dense/mul_3"
  op: "Mul"
  input: "bert/encoder/layer_3/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_3/intermediate/dense/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_3/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_3/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_3/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_3/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/output/dense/kernel"
  input: "bert/encoder/layer_3/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_3/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/output/dense/bias"
  input: "bert/encoder/layer_3/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_3/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_3/intermediate/dense/mul_3"
  input: "bert/encoder/layer_3/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_3/output/dense/MatMul"
  input: "bert/encoder/layer_3/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_3/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_3/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_3/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_3/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_3/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_3/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_3/output/dropout/keep_prob"
  input: "bert/encoder/layer_3/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_3/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_3/output/dense/BiasAdd"
  input: "bert/encoder/layer_3/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/output/dropout/div"
  input: "bert/encoder/layer_3/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/add"
  op: "Add"
  input: "bert/encoder/layer_3/output/dropout/mul"
  input: "bert/encoder/layer_3/attention/output/LayerNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/output/LayerNorm/beta"
  input: "bert/encoder/layer_3/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_3/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_3/output/LayerNorm/gamma"
  input: "bert/encoder/layer_3/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_3/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_3/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_3/output/add"
  input: "bert/encoder/layer_3/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_3/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_3/output/add"
  input: "bert/encoder/layer_3/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_3/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_3/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_3/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_3/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_3/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_3/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_3/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_3/output/add"
  input: "bert/encoder/layer_3/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_3/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_3/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_3/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_3/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_3/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_3/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_3/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/query/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/query/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_4/attention/self/query/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/query/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_4/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/query/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_4/attention/self/query/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_4/attention/self/query/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/query/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/query/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/attention/self/query/kernel"
  input: "bert/encoder/layer_4/attention/self/query/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/query/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_4/attention/self/query/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/query/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/query/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/query/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/attention/self/query/bias"
  input: "bert/encoder/layer_4/attention/self/query/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/query/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_4/attention/self/query/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/query/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/query/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_3/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_4/attention/self/query/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/query/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_4/attention/self/query/MatMul"
  input: "bert/encoder/layer_4/attention/self/query/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/key/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/key/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_4/attention/self/key/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/key/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_4/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/key/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_4/attention/self/key/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_4/attention/self/key/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/key/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/key/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/attention/self/key/kernel"
  input: "bert/encoder/layer_4/attention/self/key/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/key/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_4/attention/self/key/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/key/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/key/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/key/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/attention/self/key/bias"
  input: "bert/encoder/layer_4/attention/self/key/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/key/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_4/attention/self/key/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/key/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/key/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_3/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_4/attention/self/key/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/key/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_4/attention/self/key/MatMul"
  input: "bert/encoder/layer_4/attention/self/key/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/value/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/value/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_4/attention/self/value/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/value/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_4/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/value/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_4/attention/self/value/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_4/attention/self/value/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/value/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/value/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/attention/self/value/kernel"
  input: "bert/encoder/layer_4/attention/self/value/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/value/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_4/attention/self/value/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/value/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/value/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/value/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/attention/self/value/bias"
  input: "bert/encoder/layer_4/attention/self/value/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/value/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_4/attention/self/value/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/self/value/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/value/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_3/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_4/attention/self/value/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/value/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_4/attention/self/value/MatMul"
  input: "bert/encoder/layer_4/attention/self/value/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Reshape"
  op: "Reshape"
  input: "bert/encoder/layer_4/attention/self/query/BiasAdd"
  input: "bert/encoder/layer_4/attention/self/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/transpose"
  op: "Transpose"
  input: "bert/encoder/layer_4/attention/self/Reshape"
  input: "bert/encoder/layer_4/attention/self/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Reshape_1"
  op: "Reshape"
  input: "bert/encoder/layer_4/attention/self/key/BiasAdd"
  input: "bert/encoder/layer_4/attention/self/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/transpose_1"
  op: "Transpose"
  input: "bert/encoder/layer_4/attention/self/Reshape_1"
  input: "bert/encoder/layer_4/attention/self/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/MatMul"
  op: "BatchMatMul"
  input: "bert/encoder/layer_4/attention/self/transpose"
  input: "bert/encoder/layer_4/attention/self/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10783277451992035
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Mul"
  op: "Mul"
  input: "bert/encoder/layer_4/attention/self/MatMul"
  input: "bert/encoder/layer_4/attention/self/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/ExpandDims"
  op: "ExpandDims"
  input: "bert/encoder/mul"
  input: "bert/encoder/layer_4/attention/self/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/sub"
  op: "Sub"
  input: "bert/encoder/layer_4/attention/self/sub/x"
  input: "bert/encoder/layer_4/attention/self/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -10000.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/attention/self/sub"
  input: "bert/encoder/layer_4/attention/self/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/add"
  op: "Add"
  input: "bert/encoder/layer_4/attention/self/Mul"
  input: "bert/encoder/layer_4/attention/self/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Sub"
  op: "Sub"
  input: "bert/encoder/layer_4/attention/self/Rank"
  input: "bert/encoder/layer_4/attention/self/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Slice/begin"
  op: "Pack"
  input: "bert/encoder/layer_4/attention/self/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Slice"
  op: "Slice"
  input: "bert/encoder/layer_4/attention/self/Shape_1"
  input: "bert/encoder/layer_4/attention/self/Slice/begin"
  input: "bert/encoder/layer_4/attention/self/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/concat"
  op: "ConcatV2"
  input: "bert/encoder/layer_4/attention/self/concat/values_0"
  input: "bert/encoder/layer_4/attention/self/Slice"
  input: "bert/encoder/layer_4/attention/self/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Reshape_2"
  op: "Reshape"
  input: "bert/encoder/layer_4/attention/self/add"
  input: "bert/encoder/layer_4/attention/self/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Softmax"
  op: "Softmax"
  input: "bert/encoder/layer_4/attention/self/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Reshape_3"
  op: "Reshape"
  input: "bert/encoder/layer_4/attention/self/Softmax"
  input: "bert/encoder/layer_4/attention/self/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_4/attention/self/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_4/attention/self/dropout/random_uniform/max"
  input: "bert/encoder/layer_4/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/attention/self/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_4/attention/self/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_4/attention/self/dropout/random_uniform/mul"
  input: "bert/encoder/layer_4/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_4/attention/self/dropout/keep_prob"
  input: "bert/encoder/layer_4/attention/self/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_4/attention/self/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_4/attention/self/Reshape_3"
  input: "bert/encoder/layer_4/attention/self/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/attention/self/dropout/div"
  input: "bert/encoder/layer_4/attention/self/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Reshape_4"
  op: "Reshape"
  input: "bert/encoder/layer_4/attention/self/value/BiasAdd"
  input: "bert/encoder/layer_4/attention/self/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/transpose_2"
  op: "Transpose"
  input: "bert/encoder/layer_4/attention/self/Reshape_4"
  input: "bert/encoder/layer_4/attention/self/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/MatMul_1"
  op: "BatchMatMul"
  input: "bert/encoder/layer_4/attention/self/dropout/mul"
  input: "bert/encoder/layer_4/attention/self/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/transpose_3"
  op: "Transpose"
  input: "bert/encoder/layer_4/attention/self/MatMul_1"
  input: "bert/encoder/layer_4/attention/self/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Reshape_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/self/Reshape_5"
  op: "Reshape"
  input: "bert/encoder/layer_4/attention/self/transpose_3"
  input: "bert/encoder/layer_4/attention/self/Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_4/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_4/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_4/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_4/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/attention/output/dense/kernel"
  input: "bert/encoder/layer_4/attention/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_4/attention/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/attention/output/dense/bias"
  input: "bert/encoder/layer_4/attention/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_4/attention/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_4/attention/self/Reshape_5"
  input: "bert/encoder/layer_4/attention/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_4/attention/output/dense/MatMul"
  input: "bert/encoder/layer_4/attention/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_4/attention/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_4/attention/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_4/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/attention/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_4/attention/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_4/attention/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_4/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_4/attention/output/dropout/keep_prob"
  input: "bert/encoder/layer_4/attention/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_4/attention/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_4/attention/output/dense/BiasAdd"
  input: "bert/encoder/layer_4/attention/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/attention/output/dropout/div"
  input: "bert/encoder/layer_4/attention/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/add"
  op: "Add"
  input: "bert/encoder/layer_4/attention/output/dropout/mul"
  input: "bert/encoder/layer_3/output/LayerNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/beta"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/gamma"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/attention/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_4/attention/output/add"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_4/attention/output/add"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_4/attention/output/add"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_4/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_4/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_4/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_4/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/intermediate/dense/kernel"
  input: "bert/encoder/layer_4/intermediate/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_4/intermediate/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/bias/Initializer/zeros"
  op: "Fill"
  input: "bert/encoder/layer_4/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  input: "bert/encoder/layer_4/intermediate/dense/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/intermediate/dense/bias"
  input: "bert/encoder/layer_4/intermediate/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_4/intermediate/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/intermediate/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_4/intermediate/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_4/intermediate/dense/MatMul"
  input: "bert/encoder/layer_4/intermediate/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/Pow"
  op: "Pow"
  input: "bert/encoder/layer_4/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_4/intermediate/dense/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.044714998453855515
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/intermediate/dense/mul/x"
  input: "bert/encoder/layer_4/intermediate/dense/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/add"
  op: "Add"
  input: "bert/encoder/layer_4/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_4/intermediate/dense/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7978845834732056
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_4/intermediate/dense/mul_1/x"
  input: "bert/encoder/layer_4/intermediate/dense/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/Tanh"
  op: "Tanh"
  input: "bert/encoder/layer_4/intermediate/dense/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/add_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/add_1"
  op: "Add"
  input: "bert/encoder/layer_4/intermediate/dense/add_1/x"
  input: "bert/encoder/layer_4/intermediate/dense/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_4/intermediate/dense/mul_2/x"
  input: "bert/encoder/layer_4/intermediate/dense/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/intermediate/dense/mul_3"
  op: "Mul"
  input: "bert/encoder/layer_4/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_4/intermediate/dense/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_4/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_4/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_4/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_4/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/output/dense/kernel"
  input: "bert/encoder/layer_4/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_4/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/output/dense/bias"
  input: "bert/encoder/layer_4/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_4/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_4/intermediate/dense/mul_3"
  input: "bert/encoder/layer_4/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_4/output/dense/MatMul"
  input: "bert/encoder/layer_4/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_4/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_4/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_4/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_4/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_4/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_4/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_4/output/dropout/keep_prob"
  input: "bert/encoder/layer_4/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_4/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_4/output/dense/BiasAdd"
  input: "bert/encoder/layer_4/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/output/dropout/div"
  input: "bert/encoder/layer_4/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/add"
  op: "Add"
  input: "bert/encoder/layer_4/output/dropout/mul"
  input: "bert/encoder/layer_4/attention/output/LayerNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/output/LayerNorm/beta"
  input: "bert/encoder/layer_4/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_4/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_4/output/LayerNorm/gamma"
  input: "bert/encoder/layer_4/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_4/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_4/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_4/output/add"
  input: "bert/encoder/layer_4/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_4/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_4/output/add"
  input: "bert/encoder/layer_4/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_4/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_4/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_4/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_4/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_4/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_4/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_4/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_4/output/add"
  input: "bert/encoder/layer_4/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_4/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_4/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_4/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_4/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_4/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_4/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_4/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/query/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/query/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_5/attention/self/query/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/query/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_5/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/query/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_5/attention/self/query/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_5/attention/self/query/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/query/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/query/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/attention/self/query/kernel"
  input: "bert/encoder/layer_5/attention/self/query/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/query/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_5/attention/self/query/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/query/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/query/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/query/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/attention/self/query/bias"
  input: "bert/encoder/layer_5/attention/self/query/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/query/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_5/attention/self/query/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/query/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/query/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_4/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_5/attention/self/query/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/query/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_5/attention/self/query/MatMul"
  input: "bert/encoder/layer_5/attention/self/query/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/key/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/key/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_5/attention/self/key/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/key/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_5/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/key/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_5/attention/self/key/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_5/attention/self/key/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/key/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/key/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/attention/self/key/kernel"
  input: "bert/encoder/layer_5/attention/self/key/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/key/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_5/attention/self/key/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/key/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/key/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/key/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/attention/self/key/bias"
  input: "bert/encoder/layer_5/attention/self/key/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/key/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_5/attention/self/key/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/key/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/key/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_4/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_5/attention/self/key/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/key/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_5/attention/self/key/MatMul"
  input: "bert/encoder/layer_5/attention/self/key/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/value/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/value/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_5/attention/self/value/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/value/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_5/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/value/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_5/attention/self/value/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_5/attention/self/value/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/value/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/value/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/attention/self/value/kernel"
  input: "bert/encoder/layer_5/attention/self/value/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/value/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_5/attention/self/value/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/value/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/value/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/value/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/attention/self/value/bias"
  input: "bert/encoder/layer_5/attention/self/value/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/value/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_5/attention/self/value/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/self/value/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/value/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_4/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_5/attention/self/value/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/value/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_5/attention/self/value/MatMul"
  input: "bert/encoder/layer_5/attention/self/value/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Reshape"
  op: "Reshape"
  input: "bert/encoder/layer_5/attention/self/query/BiasAdd"
  input: "bert/encoder/layer_5/attention/self/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/transpose"
  op: "Transpose"
  input: "bert/encoder/layer_5/attention/self/Reshape"
  input: "bert/encoder/layer_5/attention/self/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Reshape_1"
  op: "Reshape"
  input: "bert/encoder/layer_5/attention/self/key/BiasAdd"
  input: "bert/encoder/layer_5/attention/self/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/transpose_1"
  op: "Transpose"
  input: "bert/encoder/layer_5/attention/self/Reshape_1"
  input: "bert/encoder/layer_5/attention/self/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/MatMul"
  op: "BatchMatMul"
  input: "bert/encoder/layer_5/attention/self/transpose"
  input: "bert/encoder/layer_5/attention/self/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10783277451992035
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Mul"
  op: "Mul"
  input: "bert/encoder/layer_5/attention/self/MatMul"
  input: "bert/encoder/layer_5/attention/self/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/ExpandDims"
  op: "ExpandDims"
  input: "bert/encoder/mul"
  input: "bert/encoder/layer_5/attention/self/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/sub"
  op: "Sub"
  input: "bert/encoder/layer_5/attention/self/sub/x"
  input: "bert/encoder/layer_5/attention/self/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -10000.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/attention/self/sub"
  input: "bert/encoder/layer_5/attention/self/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/add"
  op: "Add"
  input: "bert/encoder/layer_5/attention/self/Mul"
  input: "bert/encoder/layer_5/attention/self/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Sub"
  op: "Sub"
  input: "bert/encoder/layer_5/attention/self/Rank"
  input: "bert/encoder/layer_5/attention/self/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Slice/begin"
  op: "Pack"
  input: "bert/encoder/layer_5/attention/self/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Slice"
  op: "Slice"
  input: "bert/encoder/layer_5/attention/self/Shape_1"
  input: "bert/encoder/layer_5/attention/self/Slice/begin"
  input: "bert/encoder/layer_5/attention/self/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/concat"
  op: "ConcatV2"
  input: "bert/encoder/layer_5/attention/self/concat/values_0"
  input: "bert/encoder/layer_5/attention/self/Slice"
  input: "bert/encoder/layer_5/attention/self/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Reshape_2"
  op: "Reshape"
  input: "bert/encoder/layer_5/attention/self/add"
  input: "bert/encoder/layer_5/attention/self/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Softmax"
  op: "Softmax"
  input: "bert/encoder/layer_5/attention/self/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Reshape_3"
  op: "Reshape"
  input: "bert/encoder/layer_5/attention/self/Softmax"
  input: "bert/encoder/layer_5/attention/self/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_5/attention/self/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_5/attention/self/dropout/random_uniform/max"
  input: "bert/encoder/layer_5/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/attention/self/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_5/attention/self/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_5/attention/self/dropout/random_uniform/mul"
  input: "bert/encoder/layer_5/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_5/attention/self/dropout/keep_prob"
  input: "bert/encoder/layer_5/attention/self/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_5/attention/self/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_5/attention/self/Reshape_3"
  input: "bert/encoder/layer_5/attention/self/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/attention/self/dropout/div"
  input: "bert/encoder/layer_5/attention/self/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Reshape_4"
  op: "Reshape"
  input: "bert/encoder/layer_5/attention/self/value/BiasAdd"
  input: "bert/encoder/layer_5/attention/self/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/transpose_2"
  op: "Transpose"
  input: "bert/encoder/layer_5/attention/self/Reshape_4"
  input: "bert/encoder/layer_5/attention/self/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/MatMul_1"
  op: "BatchMatMul"
  input: "bert/encoder/layer_5/attention/self/dropout/mul"
  input: "bert/encoder/layer_5/attention/self/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/transpose_3"
  op: "Transpose"
  input: "bert/encoder/layer_5/attention/self/MatMul_1"
  input: "bert/encoder/layer_5/attention/self/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Reshape_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/self/Reshape_5"
  op: "Reshape"
  input: "bert/encoder/layer_5/attention/self/transpose_3"
  input: "bert/encoder/layer_5/attention/self/Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_5/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_5/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_5/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_5/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/attention/output/dense/kernel"
  input: "bert/encoder/layer_5/attention/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_5/attention/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/attention/output/dense/bias"
  input: "bert/encoder/layer_5/attention/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_5/attention/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_5/attention/self/Reshape_5"
  input: "bert/encoder/layer_5/attention/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_5/attention/output/dense/MatMul"
  input: "bert/encoder/layer_5/attention/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_5/attention/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_5/attention/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_5/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/attention/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_5/attention/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_5/attention/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_5/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_5/attention/output/dropout/keep_prob"
  input: "bert/encoder/layer_5/attention/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_5/attention/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_5/attention/output/dense/BiasAdd"
  input: "bert/encoder/layer_5/attention/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/attention/output/dropout/div"
  input: "bert/encoder/layer_5/attention/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/add"
  op: "Add"
  input: "bert/encoder/layer_5/attention/output/dropout/mul"
  input: "bert/encoder/layer_4/output/LayerNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/beta"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/gamma"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/attention/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_5/attention/output/add"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_5/attention/output/add"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_5/attention/output/add"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_5/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_5/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_5/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_5/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/intermediate/dense/kernel"
  input: "bert/encoder/layer_5/intermediate/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_5/intermediate/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/bias/Initializer/zeros"
  op: "Fill"
  input: "bert/encoder/layer_5/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  input: "bert/encoder/layer_5/intermediate/dense/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/intermediate/dense/bias"
  input: "bert/encoder/layer_5/intermediate/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_5/intermediate/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/intermediate/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_5/intermediate/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_5/intermediate/dense/MatMul"
  input: "bert/encoder/layer_5/intermediate/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/Pow"
  op: "Pow"
  input: "bert/encoder/layer_5/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_5/intermediate/dense/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.044714998453855515
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/intermediate/dense/mul/x"
  input: "bert/encoder/layer_5/intermediate/dense/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/add"
  op: "Add"
  input: "bert/encoder/layer_5/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_5/intermediate/dense/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7978845834732056
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_5/intermediate/dense/mul_1/x"
  input: "bert/encoder/layer_5/intermediate/dense/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/Tanh"
  op: "Tanh"
  input: "bert/encoder/layer_5/intermediate/dense/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/add_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/add_1"
  op: "Add"
  input: "bert/encoder/layer_5/intermediate/dense/add_1/x"
  input: "bert/encoder/layer_5/intermediate/dense/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_5/intermediate/dense/mul_2/x"
  input: "bert/encoder/layer_5/intermediate/dense/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/intermediate/dense/mul_3"
  op: "Mul"
  input: "bert/encoder/layer_5/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_5/intermediate/dense/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_5/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_5/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_5/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_5/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/output/dense/kernel"
  input: "bert/encoder/layer_5/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_5/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/output/dense/bias"
  input: "bert/encoder/layer_5/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_5/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_5/intermediate/dense/mul_3"
  input: "bert/encoder/layer_5/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_5/output/dense/MatMul"
  input: "bert/encoder/layer_5/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_5/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_5/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_5/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_5/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_5/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_5/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_5/output/dropout/keep_prob"
  input: "bert/encoder/layer_5/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_5/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_5/output/dense/BiasAdd"
  input: "bert/encoder/layer_5/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/output/dropout/div"
  input: "bert/encoder/layer_5/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/add"
  op: "Add"
  input: "bert/encoder/layer_5/output/dropout/mul"
  input: "bert/encoder/layer_5/attention/output/LayerNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/output/LayerNorm/beta"
  input: "bert/encoder/layer_5/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_5/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_5/output/LayerNorm/gamma"
  input: "bert/encoder/layer_5/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_5/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_5/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_5/output/add"
  input: "bert/encoder/layer_5/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_5/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_5/output/add"
  input: "bert/encoder/layer_5/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_5/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_5/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_5/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_5/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_5/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_5/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_5/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_5/output/add"
  input: "bert/encoder/layer_5/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_5/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_5/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_5/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_5/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_5/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_5/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_5/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/query/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/query/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_6/attention/self/query/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/query/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_6/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/query/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_6/attention/self/query/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_6/attention/self/query/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/query/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/query/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/attention/self/query/kernel"
  input: "bert/encoder/layer_6/attention/self/query/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/query/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_6/attention/self/query/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/query/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/query/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/query/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/attention/self/query/bias"
  input: "bert/encoder/layer_6/attention/self/query/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/query/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_6/attention/self/query/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/query/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/query/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_5/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_6/attention/self/query/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/query/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_6/attention/self/query/MatMul"
  input: "bert/encoder/layer_6/attention/self/query/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/key/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/key/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_6/attention/self/key/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/key/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_6/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/key/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_6/attention/self/key/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_6/attention/self/key/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/key/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/key/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/attention/self/key/kernel"
  input: "bert/encoder/layer_6/attention/self/key/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/key/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_6/attention/self/key/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/key/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/key/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/key/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/attention/self/key/bias"
  input: "bert/encoder/layer_6/attention/self/key/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/key/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_6/attention/self/key/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/key/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/key/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_5/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_6/attention/self/key/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/key/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_6/attention/self/key/MatMul"
  input: "bert/encoder/layer_6/attention/self/key/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/value/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/value/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_6/attention/self/value/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/value/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_6/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/value/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_6/attention/self/value/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_6/attention/self/value/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/value/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/value/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/attention/self/value/kernel"
  input: "bert/encoder/layer_6/attention/self/value/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/value/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_6/attention/self/value/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/value/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/value/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/value/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/attention/self/value/bias"
  input: "bert/encoder/layer_6/attention/self/value/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/value/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_6/attention/self/value/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/self/value/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/value/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_5/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_6/attention/self/value/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/value/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_6/attention/self/value/MatMul"
  input: "bert/encoder/layer_6/attention/self/value/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Reshape"
  op: "Reshape"
  input: "bert/encoder/layer_6/attention/self/query/BiasAdd"
  input: "bert/encoder/layer_6/attention/self/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/transpose"
  op: "Transpose"
  input: "bert/encoder/layer_6/attention/self/Reshape"
  input: "bert/encoder/layer_6/attention/self/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Reshape_1"
  op: "Reshape"
  input: "bert/encoder/layer_6/attention/self/key/BiasAdd"
  input: "bert/encoder/layer_6/attention/self/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/transpose_1"
  op: "Transpose"
  input: "bert/encoder/layer_6/attention/self/Reshape_1"
  input: "bert/encoder/layer_6/attention/self/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/MatMul"
  op: "BatchMatMul"
  input: "bert/encoder/layer_6/attention/self/transpose"
  input: "bert/encoder/layer_6/attention/self/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10783277451992035
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Mul"
  op: "Mul"
  input: "bert/encoder/layer_6/attention/self/MatMul"
  input: "bert/encoder/layer_6/attention/self/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/ExpandDims"
  op: "ExpandDims"
  input: "bert/encoder/mul"
  input: "bert/encoder/layer_6/attention/self/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/sub"
  op: "Sub"
  input: "bert/encoder/layer_6/attention/self/sub/x"
  input: "bert/encoder/layer_6/attention/self/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -10000.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/attention/self/sub"
  input: "bert/encoder/layer_6/attention/self/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/add"
  op: "Add"
  input: "bert/encoder/layer_6/attention/self/Mul"
  input: "bert/encoder/layer_6/attention/self/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Sub"
  op: "Sub"
  input: "bert/encoder/layer_6/attention/self/Rank"
  input: "bert/encoder/layer_6/attention/self/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Slice/begin"
  op: "Pack"
  input: "bert/encoder/layer_6/attention/self/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Slice"
  op: "Slice"
  input: "bert/encoder/layer_6/attention/self/Shape_1"
  input: "bert/encoder/layer_6/attention/self/Slice/begin"
  input: "bert/encoder/layer_6/attention/self/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/concat"
  op: "ConcatV2"
  input: "bert/encoder/layer_6/attention/self/concat/values_0"
  input: "bert/encoder/layer_6/attention/self/Slice"
  input: "bert/encoder/layer_6/attention/self/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Reshape_2"
  op: "Reshape"
  input: "bert/encoder/layer_6/attention/self/add"
  input: "bert/encoder/layer_6/attention/self/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Softmax"
  op: "Softmax"
  input: "bert/encoder/layer_6/attention/self/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Reshape_3"
  op: "Reshape"
  input: "bert/encoder/layer_6/attention/self/Softmax"
  input: "bert/encoder/layer_6/attention/self/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_6/attention/self/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_6/attention/self/dropout/random_uniform/max"
  input: "bert/encoder/layer_6/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/attention/self/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_6/attention/self/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_6/attention/self/dropout/random_uniform/mul"
  input: "bert/encoder/layer_6/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_6/attention/self/dropout/keep_prob"
  input: "bert/encoder/layer_6/attention/self/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_6/attention/self/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_6/attention/self/Reshape_3"
  input: "bert/encoder/layer_6/attention/self/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/attention/self/dropout/div"
  input: "bert/encoder/layer_6/attention/self/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Reshape_4"
  op: "Reshape"
  input: "bert/encoder/layer_6/attention/self/value/BiasAdd"
  input: "bert/encoder/layer_6/attention/self/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/transpose_2"
  op: "Transpose"
  input: "bert/encoder/layer_6/attention/self/Reshape_4"
  input: "bert/encoder/layer_6/attention/self/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/MatMul_1"
  op: "BatchMatMul"
  input: "bert/encoder/layer_6/attention/self/dropout/mul"
  input: "bert/encoder/layer_6/attention/self/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/transpose_3"
  op: "Transpose"
  input: "bert/encoder/layer_6/attention/self/MatMul_1"
  input: "bert/encoder/layer_6/attention/self/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Reshape_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/self/Reshape_5"
  op: "Reshape"
  input: "bert/encoder/layer_6/attention/self/transpose_3"
  input: "bert/encoder/layer_6/attention/self/Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_6/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_6/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_6/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_6/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/attention/output/dense/kernel"
  input: "bert/encoder/layer_6/attention/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_6/attention/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/attention/output/dense/bias"
  input: "bert/encoder/layer_6/attention/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_6/attention/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_6/attention/self/Reshape_5"
  input: "bert/encoder/layer_6/attention/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_6/attention/output/dense/MatMul"
  input: "bert/encoder/layer_6/attention/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_6/attention/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_6/attention/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_6/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/attention/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_6/attention/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_6/attention/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_6/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_6/attention/output/dropout/keep_prob"
  input: "bert/encoder/layer_6/attention/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_6/attention/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_6/attention/output/dense/BiasAdd"
  input: "bert/encoder/layer_6/attention/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/attention/output/dropout/div"
  input: "bert/encoder/layer_6/attention/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/add"
  op: "Add"
  input: "bert/encoder/layer_6/attention/output/dropout/mul"
  input: "bert/encoder/layer_5/output/LayerNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/beta"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/gamma"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/attention/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_6/attention/output/add"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_6/attention/output/add"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_6/attention/output/add"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_6/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_6/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_6/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_6/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/intermediate/dense/kernel"
  input: "bert/encoder/layer_6/intermediate/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_6/intermediate/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/bias/Initializer/zeros"
  op: "Fill"
  input: "bert/encoder/layer_6/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  input: "bert/encoder/layer_6/intermediate/dense/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/intermediate/dense/bias"
  input: "bert/encoder/layer_6/intermediate/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_6/intermediate/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/intermediate/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_6/intermediate/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_6/intermediate/dense/MatMul"
  input: "bert/encoder/layer_6/intermediate/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/Pow"
  op: "Pow"
  input: "bert/encoder/layer_6/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_6/intermediate/dense/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.044714998453855515
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/intermediate/dense/mul/x"
  input: "bert/encoder/layer_6/intermediate/dense/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/add"
  op: "Add"
  input: "bert/encoder/layer_6/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_6/intermediate/dense/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7978845834732056
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_6/intermediate/dense/mul_1/x"
  input: "bert/encoder/layer_6/intermediate/dense/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/Tanh"
  op: "Tanh"
  input: "bert/encoder/layer_6/intermediate/dense/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/add_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/add_1"
  op: "Add"
  input: "bert/encoder/layer_6/intermediate/dense/add_1/x"
  input: "bert/encoder/layer_6/intermediate/dense/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_6/intermediate/dense/mul_2/x"
  input: "bert/encoder/layer_6/intermediate/dense/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/intermediate/dense/mul_3"
  op: "Mul"
  input: "bert/encoder/layer_6/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_6/intermediate/dense/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_6/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_6/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_6/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_6/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/output/dense/kernel"
  input: "bert/encoder/layer_6/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_6/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/output/dense/bias"
  input: "bert/encoder/layer_6/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_6/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_6/intermediate/dense/mul_3"
  input: "bert/encoder/layer_6/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_6/output/dense/MatMul"
  input: "bert/encoder/layer_6/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_6/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_6/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_6/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_6/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_6/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_6/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_6/output/dropout/keep_prob"
  input: "bert/encoder/layer_6/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_6/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_6/output/dense/BiasAdd"
  input: "bert/encoder/layer_6/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/output/dropout/div"
  input: "bert/encoder/layer_6/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/add"
  op: "Add"
  input: "bert/encoder/layer_6/output/dropout/mul"
  input: "bert/encoder/layer_6/attention/output/LayerNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/output/LayerNorm/beta"
  input: "bert/encoder/layer_6/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_6/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_6/output/LayerNorm/gamma"
  input: "bert/encoder/layer_6/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_6/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_6/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_6/output/add"
  input: "bert/encoder/layer_6/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_6/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_6/output/add"
  input: "bert/encoder/layer_6/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_6/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_6/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_6/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_6/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_6/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_6/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_6/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_6/output/add"
  input: "bert/encoder/layer_6/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_6/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_6/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_6/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_6/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_6/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_6/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_6/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/query/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/query/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_7/attention/self/query/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/query/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/attention/self/query/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_7/attention/self/query/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/query/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_7/attention/self/query/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_7/attention/self/query/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/query/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/query/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/attention/self/query/kernel"
  input: "bert/encoder/layer_7/attention/self/query/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/query/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/query/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_7/attention/self/query/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/query/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/query/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/query/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/query/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/attention/self/query/bias"
  input: "bert/encoder/layer_7/attention/self/query/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/query/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/query/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_7/attention/self/query/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/query/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/query/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_6/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_7/attention/self/query/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/query/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_7/attention/self/query/MatMul"
  input: "bert/encoder/layer_7/attention/self/query/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/key/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/key/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_7/attention/self/key/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/key/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/attention/self/key/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_7/attention/self/key/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/key/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_7/attention/self/key/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_7/attention/self/key/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/key/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/key/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/attention/self/key/kernel"
  input: "bert/encoder/layer_7/attention/self/key/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/key/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/key/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_7/attention/self/key/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/key/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/key/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/key/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/key/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/attention/self/key/bias"
  input: "bert/encoder/layer_7/attention/self/key/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/key/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/key/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_7/attention/self/key/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/key/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/key/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_6/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_7/attention/self/key/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/key/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_7/attention/self/key/MatMul"
  input: "bert/encoder/layer_7/attention/self/key/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/value/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/value/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_7/attention/self/value/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/value/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/attention/self/value/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_7/attention/self/value/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/value/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_7/attention/self/value/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_7/attention/self/value/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/value/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/value/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/attention/self/value/kernel"
  input: "bert/encoder/layer_7/attention/self/value/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/value/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/value/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_7/attention/self/value/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/value/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/value/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/value/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/value/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/attention/self/value/bias"
  input: "bert/encoder/layer_7/attention/self/value/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/value/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/value/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_7/attention/self/value/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/self/value/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/value/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_6/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_7/attention/self/value/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/value/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_7/attention/self/value/MatMul"
  input: "bert/encoder/layer_7/attention/self/value/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Reshape"
  op: "Reshape"
  input: "bert/encoder/layer_7/attention/self/query/BiasAdd"
  input: "bert/encoder/layer_7/attention/self/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/transpose"
  op: "Transpose"
  input: "bert/encoder/layer_7/attention/self/Reshape"
  input: "bert/encoder/layer_7/attention/self/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Reshape_1/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Reshape_1"
  op: "Reshape"
  input: "bert/encoder/layer_7/attention/self/key/BiasAdd"
  input: "bert/encoder/layer_7/attention/self/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/transpose_1"
  op: "Transpose"
  input: "bert/encoder/layer_7/attention/self/Reshape_1"
  input: "bert/encoder/layer_7/attention/self/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/MatMul"
  op: "BatchMatMul"
  input: "bert/encoder/layer_7/attention/self/transpose"
  input: "bert/encoder/layer_7/attention/self/transpose_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10783277451992035
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Mul"
  op: "Mul"
  input: "bert/encoder/layer_7/attention/self/MatMul"
  input: "bert/encoder/layer_7/attention/self/Mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/ExpandDims"
  op: "ExpandDims"
  input: "bert/encoder/mul"
  input: "bert/encoder/layer_7/attention/self/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/sub"
  op: "Sub"
  input: "bert/encoder/layer_7/attention/self/sub/x"
  input: "bert/encoder/layer_7/attention/self/ExpandDims"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -10000.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/attention/self/sub"
  input: "bert/encoder/layer_7/attention/self/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/add"
  op: "Add"
  input: "bert/encoder/layer_7/attention/self/Mul"
  input: "bert/encoder/layer_7/attention/self/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Rank"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Shape_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Sub"
  op: "Sub"
  input: "bert/encoder/layer_7/attention/self/Rank"
  input: "bert/encoder/layer_7/attention/self/Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Slice/begin"
  op: "Pack"
  input: "bert/encoder/layer_7/attention/self/Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Slice/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Slice"
  op: "Slice"
  input: "bert/encoder/layer_7/attention/self/Shape_1"
  input: "bert/encoder/layer_7/attention/self/Slice/begin"
  input: "bert/encoder/layer_7/attention/self/Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/concat/values_0"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/concat"
  op: "ConcatV2"
  input: "bert/encoder/layer_7/attention/self/concat/values_0"
  input: "bert/encoder/layer_7/attention/self/Slice"
  input: "bert/encoder/layer_7/attention/self/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Reshape_2"
  op: "Reshape"
  input: "bert/encoder/layer_7/attention/self/add"
  input: "bert/encoder/layer_7/attention/self/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Softmax"
  op: "Softmax"
  input: "bert/encoder/layer_7/attention/self/Reshape_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Reshape_3"
  op: "Reshape"
  input: "bert/encoder/layer_7/attention/self/Softmax"
  input: "bert/encoder/layer_7/attention/self/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\006\000\000\000\003\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_7/attention/self/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_7/attention/self/dropout/random_uniform/max"
  input: "bert/encoder/layer_7/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/attention/self/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_7/attention/self/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_7/attention/self/dropout/random_uniform/mul"
  input: "bert/encoder/layer_7/attention/self/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_7/attention/self/dropout/keep_prob"
  input: "bert/encoder/layer_7/attention/self/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_7/attention/self/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_7/attention/self/Reshape_3"
  input: "bert/encoder/layer_7/attention/self/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/attention/self/dropout/div"
  input: "bert/encoder/layer_7/attention/self/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\006\000\000\000V\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Reshape_4"
  op: "Reshape"
  input: "bert/encoder/layer_7/attention/self/value/BiasAdd"
  input: "bert/encoder/layer_7/attention/self/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/transpose_2/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/transpose_2"
  op: "Transpose"
  input: "bert/encoder/layer_7/attention/self/Reshape_4"
  input: "bert/encoder/layer_7/attention/self/transpose_2/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/MatMul_1"
  op: "BatchMatMul"
  input: "bert/encoder/layer_7/attention/self/dropout/mul"
  input: "bert/encoder/layer_7/attention/self/transpose_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "adj_x"
    value {
      b: false
    }
  }
  attr {
    key: "adj_y"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/transpose_3/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\002\000\000\000\001\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/transpose_3"
  op: "Transpose"
  input: "bert/encoder/layer_7/attention/self/MatMul_1"
  input: "bert/encoder/layer_7/attention/self/transpose_3/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Reshape_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/self/Reshape_5"
  op: "Reshape"
  input: "bert/encoder/layer_7/attention/self/transpose_3"
  input: "bert/encoder/layer_7/attention/self/Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_7/attention/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/attention/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_7/attention/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_7/attention/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_7/attention/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/attention/output/dense/kernel"
  input: "bert/encoder/layer_7/attention/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_7/attention/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/attention/output/dense/bias"
  input: "bert/encoder/layer_7/attention/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_7/attention/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_7/attention/self/Reshape_5"
  input: "bert/encoder/layer_7/attention/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_7/attention/output/dense/MatMul"
  input: "bert/encoder/layer_7/attention/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_7/attention/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_7/attention/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_7/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/attention/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_7/attention/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_7/attention/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_7/attention/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_7/attention/output/dropout/keep_prob"
  input: "bert/encoder/layer_7/attention/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_7/attention/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_7/attention/output/dense/BiasAdd"
  input: "bert/encoder/layer_7/attention/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/attention/output/dropout/div"
  input: "bert/encoder/layer_7/attention/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/add"
  op: "Add"
  input: "bert/encoder/layer_7/attention/output/dropout/mul"
  input: "bert/encoder/layer_6/output/LayerNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/beta"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/gamma"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/attention/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_7/attention/output/add"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_7/attention/output/add"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_7/attention/output/add"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\000\004\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_7/intermediate/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/intermediate/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_7/intermediate/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_7/intermediate/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_7/intermediate/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/intermediate/dense/kernel"
  input: "bert/encoder/layer_7/intermediate/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/intermediate/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_7/intermediate/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/intermediate/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1024
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/bias/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/bias/Initializer/zeros"
  op: "Fill"
  input: "bert/encoder/layer_7/intermediate/dense/bias/Initializer/zeros/shape_as_tensor"
  input: "bert/encoder/layer_7/intermediate/dense/bias/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/intermediate/dense/bias"
  input: "bert/encoder/layer_7/intermediate/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/intermediate/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_7/intermediate/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/intermediate/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/layer_7/intermediate/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_7/intermediate/dense/MatMul"
  input: "bert/encoder/layer_7/intermediate/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/Pow/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 3.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/Pow"
  op: "Pow"
  input: "bert/encoder/layer_7/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_7/intermediate/dense/Pow/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/mul/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.044714998453855515
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/intermediate/dense/mul/x"
  input: "bert/encoder/layer_7/intermediate/dense/Pow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/add"
  op: "Add"
  input: "bert/encoder/layer_7/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_7/intermediate/dense/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.7978845834732056
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_7/intermediate/dense/mul_1/x"
  input: "bert/encoder/layer_7/intermediate/dense/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/Tanh"
  op: "Tanh"
  input: "bert/encoder/layer_7/intermediate/dense/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/add_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/add_1"
  op: "Add"
  input: "bert/encoder/layer_7/intermediate/dense/add_1/x"
  input: "bert/encoder/layer_7/intermediate/dense/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_7/intermediate/dense/mul_2/x"
  input: "bert/encoder/layer_7/intermediate/dense/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/intermediate/dense/mul_3"
  op: "Mul"
  input: "bert/encoder/layer_7/intermediate/dense/BiasAdd"
  input: "bert/encoder/layer_7/intermediate/dense/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\004\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/encoder/layer_7/output/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/output/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/encoder/layer_7/output/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/encoder/layer_7/output/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/encoder/layer_7/output/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1024
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dense/kernel/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/output/dense/kernel"
  input: "bert/encoder/layer_7/output/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dense/kernel/read"
  op: "Identity"
  input: "bert/encoder/layer_7/output/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dense/bias/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/output/dense/bias"
  input: "bert/encoder/layer_7/output/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dense/bias/read"
  op: "Identity"
  input: "bert/encoder/layer_7/output/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/dense/bias"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dense/MatMul"
  op: "MatMul"
  input: "bert/encoder/layer_7/intermediate/dense/mul_3"
  input: "bert/encoder/layer_7/output/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/encoder/layer_7/output/dense/MatMul"
  input: "bert/encoder/layer_7/output/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dropout/keep_prob"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dropout/Shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\006\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dropout/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dropout/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "bert/encoder/layer_7/output/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dropout/random_uniform/sub"
  op: "Sub"
  input: "bert/encoder/layer_7/output/dropout/random_uniform/max"
  input: "bert/encoder/layer_7/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dropout/random_uniform/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/output/dropout/random_uniform/RandomUniform"
  input: "bert/encoder/layer_7/output/dropout/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dropout/random_uniform"
  op: "Add"
  input: "bert/encoder/layer_7/output/dropout/random_uniform/mul"
  input: "bert/encoder/layer_7/output/dropout/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dropout/add"
  op: "Add"
  input: "bert/encoder/layer_7/output/dropout/keep_prob"
  input: "bert/encoder/layer_7/output/dropout/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dropout/Floor"
  op: "Floor"
  input: "bert/encoder/layer_7/output/dropout/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dropout/div"
  op: "RealDiv"
  input: "bert/encoder/layer_7/output/dense/BiasAdd"
  input: "bert/encoder/layer_7/output/dropout/keep_prob"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/dropout/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/output/dropout/div"
  input: "bert/encoder/layer_7/output/dropout/Floor"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/add"
  op: "Add"
  input: "bert/encoder/layer_7/output/dropout/mul"
  input: "bert/encoder/layer_7/attention/output/LayerNorm/batchnorm/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/beta/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/beta"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/beta/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/output/LayerNorm/beta"
  input: "bert/encoder/layer_7/output/LayerNorm/beta/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/LayerNorm/beta"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/beta/read"
  op: "Identity"
  input: "bert/encoder/layer_7/output/LayerNorm/beta"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/LayerNorm/beta"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/gamma/Initializer/ones"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/gamma"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/gamma/Assign"
  op: "Assign"
  input: "bert/encoder/layer_7/output/LayerNorm/gamma"
  input: "bert/encoder/layer_7/output/LayerNorm/gamma/Initializer/ones"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/LayerNorm/gamma"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/gamma/read"
  op: "Identity"
  input: "bert/encoder/layer_7/output/LayerNorm/gamma"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/encoder/layer_7/output/LayerNorm/gamma"
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/moments/mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/moments/mean"
  op: "Mean"
  input: "bert/encoder/layer_7/output/add"
  input: "bert/encoder/layer_7/output/LayerNorm/moments/mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/moments/StopGradient"
  op: "StopGradient"
  input: "bert/encoder/layer_7/output/LayerNorm/moments/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/moments/SquaredDifference"
  op: "SquaredDifference"
  input: "bert/encoder/layer_7/output/add"
  input: "bert/encoder/layer_7/output/LayerNorm/moments/StopGradient"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/moments/variance/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/moments/variance"
  op: "Mean"
  input: "bert/encoder/layer_7/output/LayerNorm/moments/SquaredDifference"
  input: "bert/encoder/layer_7/output/LayerNorm/moments/variance/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/batchnorm/add/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.999999960041972e-13
      }
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/batchnorm/add"
  op: "Add"
  input: "bert/encoder/layer_7/output/LayerNorm/moments/variance"
  input: "bert/encoder/layer_7/output/LayerNorm/batchnorm/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/batchnorm/Rsqrt"
  op: "Rsqrt"
  input: "bert/encoder/layer_7/output/LayerNorm/batchnorm/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/batchnorm/mul"
  op: "Mul"
  input: "bert/encoder/layer_7/output/LayerNorm/batchnorm/Rsqrt"
  input: "bert/encoder/layer_7/output/LayerNorm/gamma/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/batchnorm/mul_1"
  op: "Mul"
  input: "bert/encoder/layer_7/output/add"
  input: "bert/encoder/layer_7/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/batchnorm/mul_2"
  op: "Mul"
  input: "bert/encoder/layer_7/output/LayerNorm/moments/mean"
  input: "bert/encoder/layer_7/output/LayerNorm/batchnorm/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/batchnorm/sub"
  op: "Sub"
  input: "bert/encoder/layer_7/output/LayerNorm/beta/read"
  input: "bert/encoder/layer_7/output/LayerNorm/batchnorm/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/layer_7/output/LayerNorm/batchnorm/add_1"
  op: "Add"
  input: "bert/encoder/layer_7/output/LayerNorm/batchnorm/mul_1"
  input: "bert/encoder/layer_7/output/LayerNorm/batchnorm/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "bert/encoder/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/Reshape_2"
  op: "Reshape"
  input: "bert/encoder/layer_0/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/Reshape_3/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/Reshape_3"
  op: "Reshape"
  input: "bert/encoder/layer_1/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/Reshape_3/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/Reshape_4"
  op: "Reshape"
  input: "bert/encoder/layer_2/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/Reshape_5/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/Reshape_5"
  op: "Reshape"
  input: "bert/encoder/layer_3/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/Reshape_5/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/Reshape_6/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/Reshape_6"
  op: "Reshape"
  input: "bert/encoder/layer_4/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/Reshape_6/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/Reshape_7/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/Reshape_7"
  op: "Reshape"
  input: "bert/encoder/layer_5/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/Reshape_7/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/Reshape_8/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/Reshape_8"
  op: "Reshape"
  input: "bert/encoder/layer_6/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/Reshape_8/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/encoder/Reshape_9/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\002\000\000\000\003\000\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/encoder/Reshape_9"
  op: "Reshape"
  input: "bert/encoder/layer_7/output/LayerNorm/batchnorm/add_1"
  input: "bert/encoder/Reshape_9/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "bert/pooler/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bert/pooler/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "bert/pooler/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "bert/pooler/strided_slice"
  op: "StridedSlice"
  input: "bert/encoder/Reshape_9"
  input: "bert/pooler/strided_slice/stack"
  input: "bert/pooler/strided_slice/stack_1"
  input: "bert/pooler/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 5
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/pooler/Squeeze"
  op: "Squeeze"
  input: "bert/pooler/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "bert/pooler/dense/kernel/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/pooler/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\002\000\000\004\002\000\000"
      }
    }
  }
}
node {
  name: "bert/pooler/dense/kernel/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/pooler/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/pooler/dense/kernel/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/pooler/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.019999999552965164
      }
    }
  }
}
node {
  name: "bert/pooler/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "bert/pooler/dense/kernel/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/pooler/dense/kernel"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "bert/pooler/dense/kernel/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "bert/pooler/dense/kernel/Initializer/truncated_normal/TruncatedNormal"
  input: "bert/pooler/dense/kernel/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/pooler/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/pooler/dense/kernel/Initializer/truncated_normal"
  op: "Add"
  input: "bert/pooler/dense/kernel/Initializer/truncated_normal/mul"
  input: "bert/pooler/dense/kernel/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/pooler/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/pooler/dense/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/pooler/dense/kernel"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/pooler/dense/kernel/Assign"
  op: "Assign"
  input: "bert/pooler/dense/kernel"
  input: "bert/pooler/dense/kernel/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/pooler/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/pooler/dense/kernel/read"
  op: "Identity"
  input: "bert/pooler/dense/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/pooler/dense/kernel"
      }
    }
  }
}
node {
  name: "bert/pooler/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/pooler/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 516
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "bert/pooler/dense/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/pooler/dense/bias"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 516
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "bert/pooler/dense/bias/Assign"
  op: "Assign"
  input: "bert/pooler/dense/bias"
  input: "bert/pooler/dense/bias/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/pooler/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "bert/pooler/dense/bias/read"
  op: "Identity"
  input: "bert/pooler/dense/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@bert/pooler/dense/bias"
      }
    }
  }
}
node {
  name: "bert/pooler/dense/MatMul"
  op: "MatMul"
  input: "bert/pooler/Squeeze"
  input: "bert/pooler/dense/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "bert/pooler/dense/BiasAdd"
  op: "BiasAdd"
  input: "bert/pooler/dense/MatMul"
  input: "bert/pooler/dense/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "bert/pooler/dense/Tanh"
  op: "Tanh"
  input: "bert/pooler/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 26
}
